// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_service.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "MessageService.pbobjc.h"
#import "common/MessageTypes.pbobjc.h"
#import "common/Chat.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Chat);
GPBObjCClassDeclaration(Message);
GPBObjCClassDeclaration(MessageMeta);
GPBObjCClassDeclaration(MessagesRange);
GPBObjCClassDeclaration(Peer);

#pragma mark - MessageServiceRoot

@implementation MessageServiceRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - MessageServiceRoot_FileDescriptor

static GPBFileDescriptor *MessageServiceRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - MessageSendRequest

@implementation MessageSendRequest

@dynamic hasPeer, peer;
@dynamic hasMessage, message;

typedef struct MessageSendRequest__storage_ {
  uint32_t _has_storage_[1];
  Peer *peer;
  Message *message;
} MessageSendRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "peer",
        .dataTypeSpecific.clazz = GPBObjCClass(Peer),
        .number = MessageSendRequest_FieldNumber_Peer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MessageSendRequest__storage_, peer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "message",
        .dataTypeSpecific.clazz = GPBObjCClass(Message),
        .number = MessageSendRequest_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MessageSendRequest__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessageSendRequest class]
                                     rootClass:[MessageServiceRoot class]
                                          file:MessageServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessageSendRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MessageSendResponse

@implementation MessageSendResponse

@dynamic messageId;
@dynamic state;
@dynamic hasChat, chat;
@dynamic hasMeta, meta;
@dynamic seqNumber;

typedef struct MessageSendResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *messageId;
  Chat *chat;
  MessageMeta *meta;
  uint64_t state;
  uint64_t seqNumber;
} MessageSendResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messageId",
        .dataTypeSpecific.clazz = Nil,
        .number = MessageSendResponse_FieldNumber_MessageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MessageSendResponse__storage_, messageId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "state",
        .dataTypeSpecific.clazz = Nil,
        .number = MessageSendResponse_FieldNumber_State,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MessageSendResponse__storage_, state),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "chat",
        .dataTypeSpecific.clazz = GPBObjCClass(Chat),
        .number = MessageSendResponse_FieldNumber_Chat,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MessageSendResponse__storage_, chat),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "meta",
        .dataTypeSpecific.clazz = GPBObjCClass(MessageMeta),
        .number = MessageSendResponse_FieldNumber_Meta,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MessageSendResponse__storage_, meta),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "seqNumber",
        .dataTypeSpecific.clazz = Nil,
        .number = MessageSendResponse_FieldNumber_SeqNumber,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MessageSendResponse__storage_, seqNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessageSendResponse class]
                                     rootClass:[MessageServiceRoot class]
                                          file:MessageServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessageSendResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetChatMessagesRequest

@implementation GetChatMessagesRequest

@dynamic chatId;
@dynamic maxSeqNumber;
@dynamic limit;

typedef struct GetChatMessagesRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *chatId;
  uint64_t maxSeqNumber;
  int64_t limit;
} GetChatMessagesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chatId",
        .dataTypeSpecific.clazz = Nil,
        .number = GetChatMessagesRequest_FieldNumber_ChatId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetChatMessagesRequest__storage_, chatId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "maxSeqNumber",
        .dataTypeSpecific.clazz = Nil,
        .number = GetChatMessagesRequest_FieldNumber_MaxSeqNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetChatMessagesRequest__storage_, maxSeqNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "limit",
        .dataTypeSpecific.clazz = Nil,
        .number = GetChatMessagesRequest_FieldNumber_Limit,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetChatMessagesRequest__storage_, limit),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetChatMessagesRequest class]
                                     rootClass:[MessageServiceRoot class]
                                          file:MessageServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetChatMessagesRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetChatMessagesResponse

@implementation GetChatMessagesResponse

@dynamic messagesArray, messagesArray_Count;

typedef struct GetChatMessagesResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *messagesArray;
} GetChatMessagesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messagesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Message),
        .number = GetChatMessagesResponse_FieldNumber_MessagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetChatMessagesResponse__storage_, messagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetChatMessagesResponse class]
                                     rootClass:[MessageServiceRoot class]
                                          file:MessageServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetChatMessagesResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MessagesDeliveredRequest

@implementation MessagesDeliveredRequest

@dynamic chatId;
@dynamic maxSeqNumber;

typedef struct MessagesDeliveredRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *chatId;
  uint64_t maxSeqNumber;
} MessagesDeliveredRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chatId",
        .dataTypeSpecific.clazz = Nil,
        .number = MessagesDeliveredRequest_FieldNumber_ChatId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MessagesDeliveredRequest__storage_, chatId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "maxSeqNumber",
        .dataTypeSpecific.clazz = Nil,
        .number = MessagesDeliveredRequest_FieldNumber_MaxSeqNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MessagesDeliveredRequest__storage_, maxSeqNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessagesDeliveredRequest class]
                                     rootClass:[MessageServiceRoot class]
                                          file:MessageServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessagesDeliveredRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MessagesDeliveredResponse

@implementation MessagesDeliveredResponse

@dynamic state;

typedef struct MessagesDeliveredResponse__storage_ {
  uint32_t _has_storage_[1];
  uint64_t state;
} MessagesDeliveredResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "state",
        .dataTypeSpecific.clazz = Nil,
        .number = MessagesDeliveredResponse_FieldNumber_State,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MessagesDeliveredResponse__storage_, state),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessagesDeliveredResponse class]
                                     rootClass:[MessageServiceRoot class]
                                          file:MessageServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessagesDeliveredResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MessagesReadRequest

@implementation MessagesReadRequest

@dynamic chatId;
@dynamic maxSeqNumber;

typedef struct MessagesReadRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *chatId;
  uint64_t maxSeqNumber;
} MessagesReadRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chatId",
        .dataTypeSpecific.clazz = Nil,
        .number = MessagesReadRequest_FieldNumber_ChatId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MessagesReadRequest__storage_, chatId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "maxSeqNumber",
        .dataTypeSpecific.clazz = Nil,
        .number = MessagesReadRequest_FieldNumber_MaxSeqNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MessagesReadRequest__storage_, maxSeqNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessagesReadRequest class]
                                     rootClass:[MessageServiceRoot class]
                                          file:MessageServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessagesReadRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MessagesReadResponse

@implementation MessagesReadResponse

@dynamic state;

typedef struct MessagesReadResponse__storage_ {
  uint32_t _has_storage_[1];
  uint64_t state;
} MessagesReadResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "state",
        .dataTypeSpecific.clazz = Nil,
        .number = MessagesReadResponse_FieldNumber_State,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MessagesReadResponse__storage_, state),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessagesReadResponse class]
                                     rootClass:[MessageServiceRoot class]
                                          file:MessageServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessagesReadResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MessagesDeleteRequest

@implementation MessagesDeleteRequest

@dynamic chatId;
@dynamic rangeArray, rangeArray_Count;
@dynamic forEveryone;

typedef struct MessagesDeleteRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *chatId;
  NSMutableArray *rangeArray;
} MessagesDeleteRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chatId",
        .dataTypeSpecific.clazz = Nil,
        .number = MessagesDeleteRequest_FieldNumber_ChatId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MessagesDeleteRequest__storage_, chatId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "rangeArray",
        .dataTypeSpecific.clazz = GPBObjCClass(MessagesRange),
        .number = MessagesDeleteRequest_FieldNumber_RangeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MessagesDeleteRequest__storage_, rangeArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "forEveryone",
        .dataTypeSpecific.clazz = Nil,
        .number = MessagesDeleteRequest_FieldNumber_ForEveryone,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessagesDeleteRequest class]
                                     rootClass:[MessageServiceRoot class]
                                          file:MessageServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessagesDeleteRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MessagesDeleteResponse

@implementation MessagesDeleteResponse


typedef struct MessagesDeleteResponse__storage_ {
  uint32_t _has_storage_[1];
} MessagesDeleteResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessagesDeleteResponse class]
                                     rootClass:[MessageServiceRoot class]
                                          file:MessageServiceRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MessagesDeleteResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendTypingRequest

@implementation SendTypingRequest

@dynamic chatId;

typedef struct SendTypingRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *chatId;
} SendTypingRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chatId",
        .dataTypeSpecific.clazz = Nil,
        .number = SendTypingRequest_FieldNumber_ChatId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendTypingRequest__storage_, chatId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendTypingRequest class]
                                     rootClass:[MessageServiceRoot class]
                                          file:MessageServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendTypingRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendTypingResponse

@implementation SendTypingResponse


typedef struct SendTypingResponse__storage_ {
  uint32_t _has_storage_[1];
} SendTypingResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendTypingResponse class]
                                     rootClass:[MessageServiceRoot class]
                                          file:MessageServiceRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(SendTypingResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendAudioRecordingRequest

@implementation SendAudioRecordingRequest

@dynamic chatId;

typedef struct SendAudioRecordingRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *chatId;
} SendAudioRecordingRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chatId",
        .dataTypeSpecific.clazz = Nil,
        .number = SendAudioRecordingRequest_FieldNumber_ChatId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendAudioRecordingRequest__storage_, chatId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendAudioRecordingRequest class]
                                     rootClass:[MessageServiceRoot class]
                                          file:MessageServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendAudioRecordingRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendAudioRecordingResponse

@implementation SendAudioRecordingResponse


typedef struct SendAudioRecordingResponse__storage_ {
  uint32_t _has_storage_[1];
} SendAudioRecordingResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendAudioRecordingResponse class]
                                     rootClass:[MessageServiceRoot class]
                                          file:MessageServiceRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(SendAudioRecordingResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
