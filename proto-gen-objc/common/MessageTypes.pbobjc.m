// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/message_types.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "common/MessageTypes.pbobjc.h"
#import "enumerated/Enumerated.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(AudioMessage);
GPBObjCClassDeclaration(MessageMeta);
GPBObjCClassDeclaration(MessageState);
GPBObjCClassDeclaration(PhotoMessage);
GPBObjCClassDeclaration(Receiver);
GPBObjCClassDeclaration(Sender);
GPBObjCClassDeclaration(TextMessage);
GPBObjCClassDeclaration(VideoMessage);
GPBObjCClassDeclaration(VoiceMessage);

#pragma mark - MessageTypesRoot

@implementation MessageTypesRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - MessageTypesRoot_FileDescriptor

static GPBFileDescriptor *MessageTypesRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - MessageState

@implementation MessageState

@dynamic read;
@dynamic delivered;
@dynamic edited;

typedef struct MessageState__storage_ {
  uint32_t _has_storage_[1];
  int64_t edited;
} MessageState__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "read",
        .dataTypeSpecific.clazz = Nil,
        .number = MessageState_FieldNumber_Read,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "delivered",
        .dataTypeSpecific.clazz = Nil,
        .number = MessageState_FieldNumber_Delivered,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "edited",
        .dataTypeSpecific.clazz = Nil,
        .number = MessageState_FieldNumber_Edited,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MessageState__storage_, edited),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessageState class]
                                     rootClass:[MessageTypesRoot class]
                                          file:MessageTypesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessageState__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MessageMeta

@implementation MessageMeta

@dynamic created;

typedef struct MessageMeta__storage_ {
  uint32_t _has_storage_[1];
  int64_t created;
} MessageMeta__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "created",
        .dataTypeSpecific.clazz = Nil,
        .number = MessageMeta_FieldNumber_Created,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MessageMeta__storage_, created),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessageMeta class]
                                     rootClass:[MessageTypesRoot class]
                                          file:MessageTypesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessageMeta__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TextMessage

@implementation TextMessage

@dynamic content;

typedef struct TextMessage__storage_ {
  uint32_t _has_storage_[1];
  NSString *content;
} TextMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "content",
        .dataTypeSpecific.clazz = Nil,
        .number = TextMessage_FieldNumber_Content,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TextMessage__storage_, content),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TextMessage class]
                                     rootClass:[MessageTypesRoot class]
                                          file:MessageTypesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TextMessage__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AudioMessage

@implementation AudioMessage

@dynamic fileId;
@dynamic duration;
@dynamic fileSize;
@dynamic mimeType;
@dynamic fileName;

typedef struct AudioMessage__storage_ {
  uint32_t _has_storage_[1];
  NSString *fileId;
  NSString *mimeType;
  NSString *fileName;
  int64_t duration;
  int64_t fileSize;
} AudioMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fileId",
        .dataTypeSpecific.clazz = Nil,
        .number = AudioMessage_FieldNumber_FileId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AudioMessage__storage_, fileId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "duration",
        .dataTypeSpecific.clazz = Nil,
        .number = AudioMessage_FieldNumber_Duration,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AudioMessage__storage_, duration),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fileSize",
        .dataTypeSpecific.clazz = Nil,
        .number = AudioMessage_FieldNumber_FileSize,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AudioMessage__storage_, fileSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "mimeType",
        .dataTypeSpecific.clazz = Nil,
        .number = AudioMessage_FieldNumber_MimeType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AudioMessage__storage_, mimeType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fileName",
        .dataTypeSpecific.clazz = Nil,
        .number = AudioMessage_FieldNumber_FileName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(AudioMessage__storage_, fileName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AudioMessage class]
                                     rootClass:[MessageTypesRoot class]
                                          file:MessageTypesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AudioMessage__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoiceMessage

@implementation VoiceMessage

@dynamic fileId;
@dynamic duration;
@dynamic fileSize;
@dynamic mimeType;
@dynamic fileName;

typedef struct VoiceMessage__storage_ {
  uint32_t _has_storage_[1];
  NSString *fileId;
  NSString *mimeType;
  NSString *fileName;
  int64_t duration;
  int64_t fileSize;
} VoiceMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fileId",
        .dataTypeSpecific.clazz = Nil,
        .number = VoiceMessage_FieldNumber_FileId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoiceMessage__storage_, fileId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "duration",
        .dataTypeSpecific.clazz = Nil,
        .number = VoiceMessage_FieldNumber_Duration,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoiceMessage__storage_, duration),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fileSize",
        .dataTypeSpecific.clazz = Nil,
        .number = VoiceMessage_FieldNumber_FileSize,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VoiceMessage__storage_, fileSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "mimeType",
        .dataTypeSpecific.clazz = Nil,
        .number = VoiceMessage_FieldNumber_MimeType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VoiceMessage__storage_, mimeType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fileName",
        .dataTypeSpecific.clazz = Nil,
        .number = VoiceMessage_FieldNumber_FileName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VoiceMessage__storage_, fileName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoiceMessage class]
                                     rootClass:[MessageTypesRoot class]
                                          file:MessageTypesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoiceMessage__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PhotoMessage

@implementation PhotoMessage

@dynamic fileId;
@dynamic fileSize;
@dynamic mimeType;
@dynamic fileName;
@dynamic width;
@dynamic height;
@dynamic preview;

typedef struct PhotoMessage__storage_ {
  uint32_t _has_storage_[1];
  int32_t width;
  int32_t height;
  NSString *fileId;
  NSString *mimeType;
  NSString *fileName;
  NSData *preview;
  int64_t fileSize;
} PhotoMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fileId",
        .dataTypeSpecific.clazz = Nil,
        .number = PhotoMessage_FieldNumber_FileId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PhotoMessage__storage_, fileId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fileSize",
        .dataTypeSpecific.clazz = Nil,
        .number = PhotoMessage_FieldNumber_FileSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PhotoMessage__storage_, fileSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "mimeType",
        .dataTypeSpecific.clazz = Nil,
        .number = PhotoMessage_FieldNumber_MimeType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PhotoMessage__storage_, mimeType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fileName",
        .dataTypeSpecific.clazz = Nil,
        .number = PhotoMessage_FieldNumber_FileName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PhotoMessage__storage_, fileName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "width",
        .dataTypeSpecific.clazz = Nil,
        .number = PhotoMessage_FieldNumber_Width,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PhotoMessage__storage_, width),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "height",
        .dataTypeSpecific.clazz = Nil,
        .number = PhotoMessage_FieldNumber_Height,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PhotoMessage__storage_, height),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "preview",
        .dataTypeSpecific.clazz = Nil,
        .number = PhotoMessage_FieldNumber_Preview,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PhotoMessage__storage_, preview),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PhotoMessage class]
                                     rootClass:[MessageTypesRoot class]
                                          file:MessageTypesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PhotoMessage__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VideoMessage

@implementation VideoMessage

@dynamic fileId;
@dynamic duration;
@dynamic fileSize;
@dynamic mimeType;
@dynamic fileName;
@dynamic width;
@dynamic height;
@dynamic preview;

typedef struct VideoMessage__storage_ {
  uint32_t _has_storage_[1];
  int32_t width;
  int32_t height;
  NSString *fileId;
  NSString *mimeType;
  NSString *fileName;
  NSData *preview;
  int64_t duration;
  int64_t fileSize;
} VideoMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fileId",
        .dataTypeSpecific.clazz = Nil,
        .number = VideoMessage_FieldNumber_FileId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VideoMessage__storage_, fileId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "duration",
        .dataTypeSpecific.clazz = Nil,
        .number = VideoMessage_FieldNumber_Duration,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VideoMessage__storage_, duration),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fileSize",
        .dataTypeSpecific.clazz = Nil,
        .number = VideoMessage_FieldNumber_FileSize,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VideoMessage__storage_, fileSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "mimeType",
        .dataTypeSpecific.clazz = Nil,
        .number = VideoMessage_FieldNumber_MimeType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VideoMessage__storage_, mimeType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fileName",
        .dataTypeSpecific.clazz = Nil,
        .number = VideoMessage_FieldNumber_FileName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VideoMessage__storage_, fileName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "width",
        .dataTypeSpecific.clazz = Nil,
        .number = VideoMessage_FieldNumber_Width,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(VideoMessage__storage_, width),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "height",
        .dataTypeSpecific.clazz = Nil,
        .number = VideoMessage_FieldNumber_Height,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(VideoMessage__storage_, height),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "preview",
        .dataTypeSpecific.clazz = Nil,
        .number = VideoMessage_FieldNumber_Preview,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(VideoMessage__storage_, preview),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VideoMessage class]
                                     rootClass:[MessageTypesRoot class]
                                          file:MessageTypesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VideoMessage__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Sender

@implementation Sender

@dynamic userId;
@dynamic deviceId;

typedef struct Sender__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *deviceId;
} Sender__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = Sender_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Sender__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.clazz = Nil,
        .number = Sender_FieldNumber_DeviceId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Sender__storage_, deviceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Sender class]
                                     rootClass:[MessageTypesRoot class]
                                          file:MessageTypesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Sender__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Receiver

@implementation Receiver

@dynamic userId;
@dynamic chatId;

typedef struct Receiver__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *chatId;
} Receiver__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = Receiver_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Receiver__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "chatId",
        .dataTypeSpecific.clazz = Nil,
        .number = Receiver_FieldNumber_ChatId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Receiver__storage_, chatId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Receiver class]
                                     rootClass:[MessageTypesRoot class]
                                          file:MessageTypesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Receiver__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Message

@implementation Message

@dynamic contentOneOfCase;
@dynamic id_p;
@dynamic hasReceiver, receiver;
@dynamic hasSender, sender;
@dynamic hasState, state;
@dynamic hasMeta, meta;
@dynamic chatType;
@dynamic seqNumber;
@dynamic type;
@dynamic text;
@dynamic audio;
@dynamic voice;
@dynamic photo;
@dynamic video;

typedef struct Message__storage_ {
  uint32_t _has_storage_[2];
  ChatTypeEnum chatType;
  MessageTypeEnum type;
  NSString *id_p;
  Receiver *receiver;
  Sender *sender;
  MessageState *state;
  MessageMeta *meta;
  TextMessage *text;
  AudioMessage *audio;
  VoiceMessage *voice;
  PhotoMessage *photo;
  VideoMessage *video;
  uint64_t seqNumber;
} Message__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = Message_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Message__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "receiver",
        .dataTypeSpecific.clazz = GPBObjCClass(Receiver),
        .number = Message_FieldNumber_Receiver,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Message__storage_, receiver),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sender",
        .dataTypeSpecific.clazz = GPBObjCClass(Sender),
        .number = Message_FieldNumber_Sender,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Message__storage_, sender),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "state",
        .dataTypeSpecific.clazz = GPBObjCClass(MessageState),
        .number = Message_FieldNumber_State,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Message__storage_, state),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "meta",
        .dataTypeSpecific.clazz = GPBObjCClass(MessageMeta),
        .number = Message_FieldNumber_Meta,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Message__storage_, meta),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chatType",
        .dataTypeSpecific.enumDescFunc = ChatTypeEnum_EnumDescriptor,
        .number = Message_FieldNumber_ChatType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Message__storage_, chatType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "seqNumber",
        .dataTypeSpecific.clazz = Nil,
        .number = Message_FieldNumber_SeqNumber,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Message__storage_, seqNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = MessageTypeEnum_EnumDescriptor,
        .number = Message_FieldNumber_Type,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Message__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "text",
        .dataTypeSpecific.clazz = GPBObjCClass(TextMessage),
        .number = Message_FieldNumber_Text,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Message__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "audio",
        .dataTypeSpecific.clazz = GPBObjCClass(AudioMessage),
        .number = Message_FieldNumber_Audio,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Message__storage_, audio),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "voice",
        .dataTypeSpecific.clazz = GPBObjCClass(VoiceMessage),
        .number = Message_FieldNumber_Voice,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Message__storage_, voice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "photo",
        .dataTypeSpecific.clazz = GPBObjCClass(PhotoMessage),
        .number = Message_FieldNumber_Photo,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Message__storage_, photo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "video",
        .dataTypeSpecific.clazz = GPBObjCClass(VideoMessage),
        .number = Message_FieldNumber_Video,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Message__storage_, video),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Message class]
                                     rootClass:[MessageTypesRoot class]
                                          file:MessageTypesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Message__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "content",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Message_ChatType_RawValue(Message *message) {
  GPBDescriptor *descriptor = [Message descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Message_FieldNumber_ChatType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetMessage_ChatType_RawValue(Message *message, int32_t value) {
  GPBDescriptor *descriptor = [Message descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Message_FieldNumber_ChatType];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t Message_Type_RawValue(Message *message) {
  GPBDescriptor *descriptor = [Message descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Message_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetMessage_Type_RawValue(Message *message, int32_t value) {
  GPBDescriptor *descriptor = [Message descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Message_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

void Message_ClearContentOneOfCase(Message *message) {
  GPBDescriptor *descriptor = [Message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - MessagesRange

@implementation MessagesRange

@dynamic maxSeqNumber;
@dynamic minSeqNumber;

typedef struct MessagesRange__storage_ {
  uint32_t _has_storage_[1];
  uint64_t maxSeqNumber;
  uint64_t minSeqNumber;
} MessagesRange__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "maxSeqNumber",
        .dataTypeSpecific.clazz = Nil,
        .number = MessagesRange_FieldNumber_MaxSeqNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MessagesRange__storage_, maxSeqNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "minSeqNumber",
        .dataTypeSpecific.clazz = Nil,
        .number = MessagesRange_FieldNumber_MinSeqNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MessagesRange__storage_, minSeqNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessagesRange class]
                                     rootClass:[MessageTypesRoot class]
                                          file:MessageTypesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessagesRange__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
