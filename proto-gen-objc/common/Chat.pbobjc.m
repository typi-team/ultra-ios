// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/chat.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "common/Chat.pbobjc.h"
#import "enumerated/Enumerated.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(PeerChat);
GPBObjCClassDeclaration(PeerUser);

#pragma mark - ChatRoot

@implementation ChatRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ChatRoot_FileDescriptor

static GPBFileDescriptor *ChatRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Chat

@implementation Chat

@dynamic chatType;
@dynamic chatId;
@dynamic title;

typedef struct Chat__storage_ {
  uint32_t _has_storage_[1];
  ChatTypeEnum chatType;
  NSString *chatId;
  NSString *title;
} Chat__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chatType",
        .dataTypeSpecific.enumDescFunc = ChatTypeEnum_EnumDescriptor,
        .number = Chat_FieldNumber_ChatType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Chat__storage_, chatType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "chatId",
        .dataTypeSpecific.clazz = Nil,
        .number = Chat_FieldNumber_ChatId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Chat__storage_, chatId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.clazz = Nil,
        .number = Chat_FieldNumber_Title,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Chat__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Chat class]
                                     rootClass:[ChatRoot class]
                                          file:ChatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Chat__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Chat_ChatType_RawValue(Chat *message) {
  GPBDescriptor *descriptor = [Chat descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Chat_FieldNumber_ChatType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetChat_ChatType_RawValue(Chat *message, int32_t value) {
  GPBDescriptor *descriptor = [Chat descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Chat_FieldNumber_ChatType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - PeerUser

@implementation PeerUser

@dynamic userId;

typedef struct PeerUser__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
} PeerUser__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = PeerUser_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PeerUser__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PeerUser class]
                                     rootClass:[ChatRoot class]
                                          file:ChatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PeerUser__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PeerChat

@implementation PeerChat

@dynamic chatId;

typedef struct PeerChat__storage_ {
  uint32_t _has_storage_[1];
  NSString *chatId;
} PeerChat__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chatId",
        .dataTypeSpecific.clazz = Nil,
        .number = PeerChat_FieldNumber_ChatId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PeerChat__storage_, chatId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PeerChat class]
                                     rootClass:[ChatRoot class]
                                          file:ChatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PeerChat__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Peer

@implementation Peer

@dynamic ofPeerOneOfCase;
@dynamic user;
@dynamic chat;

typedef struct Peer__storage_ {
  uint32_t _has_storage_[2];
  PeerUser *user;
  PeerChat *chat;
} Peer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "user",
        .dataTypeSpecific.clazz = GPBObjCClass(PeerUser),
        .number = Peer_FieldNumber_User,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Peer__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chat",
        .dataTypeSpecific.clazz = GPBObjCClass(PeerChat),
        .number = Peer_FieldNumber_Chat,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Peer__storage_, chat),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Peer class]
                                     rootClass:[ChatRoot class]
                                          file:ChatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Peer__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "ofPeer",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void Peer_ClearOfPeerOneOfCase(Peer *message) {
  GPBDescriptor *descriptor = [Peer descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
