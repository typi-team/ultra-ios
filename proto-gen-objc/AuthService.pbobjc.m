// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth_service.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "AuthService.pbobjc.h"
#import "enumerated/Enumerated.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - AuthServiceRoot

@implementation AuthServiceRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - AuthServiceRoot_FileDescriptor

static GPBFileDescriptor *AuthServiceRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - IssueJwtRequest

@implementation IssueJwtRequest

@dynamic userId;
@dynamic deviceId;
@dynamic device;

typedef struct IssueJwtRequest__storage_ {
  uint32_t _has_storage_[1];
  DeviceEnum device;
  NSString *userId;
  NSString *deviceId;
} IssueJwtRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = IssueJwtRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IssueJwtRequest__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.clazz = Nil,
        .number = IssueJwtRequest_FieldNumber_DeviceId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IssueJwtRequest__storage_, deviceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "device",
        .dataTypeSpecific.enumDescFunc = DeviceEnum_EnumDescriptor,
        .number = IssueJwtRequest_FieldNumber_Device,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IssueJwtRequest__storage_, device),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IssueJwtRequest class]
                                     rootClass:[AuthServiceRoot class]
                                          file:AuthServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IssueJwtRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t IssueJwtRequest_Device_RawValue(IssueJwtRequest *message) {
  GPBDescriptor *descriptor = [IssueJwtRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:IssueJwtRequest_FieldNumber_Device];
  return GPBGetMessageRawEnumField(message, field);
}

void SetIssueJwtRequest_Device_RawValue(IssueJwtRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [IssueJwtRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:IssueJwtRequest_FieldNumber_Device];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - GetUserIdRequest

@implementation GetUserIdRequest

@dynamic phone;
@dynamic firstname;
@dynamic lastname;

typedef struct GetUserIdRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *phone;
  NSString *firstname;
  NSString *lastname;
} GetUserIdRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "phone",
        .dataTypeSpecific.clazz = Nil,
        .number = GetUserIdRequest_FieldNumber_Phone,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetUserIdRequest__storage_, phone),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "firstname",
        .dataTypeSpecific.clazz = Nil,
        .number = GetUserIdRequest_FieldNumber_Firstname,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetUserIdRequest__storage_, firstname),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lastname",
        .dataTypeSpecific.clazz = Nil,
        .number = GetUserIdRequest_FieldNumber_Lastname,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetUserIdRequest__storage_, lastname),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetUserIdRequest class]
                                     rootClass:[AuthServiceRoot class]
                                          file:AuthServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetUserIdRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetUserIdResponse

@implementation GetUserIdResponse

@dynamic code;
@dynamic message;
@dynamic userId;

typedef struct GetUserIdResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t code;
  NSString *message;
  NSString *userId;
} GetUserIdResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = GetUserIdResponse_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetUserIdResponse__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "message",
        .dataTypeSpecific.clazz = Nil,
        .number = GetUserIdResponse_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetUserIdResponse__storage_, message),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = GetUserIdResponse_FieldNumber_UserId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetUserIdResponse__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetUserIdResponse class]
                                     rootClass:[AuthServiceRoot class]
                                          file:AuthServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetUserIdResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IssueJwtResponse

@implementation IssueJwtResponse

@dynamic code;
@dynamic message;
@dynamic token;

typedef struct IssueJwtResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t code;
  NSString *message;
  NSString *token;
} IssueJwtResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = IssueJwtResponse_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IssueJwtResponse__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "message",
        .dataTypeSpecific.clazz = Nil,
        .number = IssueJwtResponse_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IssueJwtResponse__storage_, message),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "token",
        .dataTypeSpecific.clazz = Nil,
        .number = IssueJwtResponse_FieldNumber_Token,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IssueJwtResponse__storage_, token),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IssueJwtResponse class]
                                     rootClass:[AuthServiceRoot class]
                                          file:AuthServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IssueJwtResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
