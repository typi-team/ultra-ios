// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device_service.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "DeviceService.pbobjc.h"
#import "enumerated/Enumerated.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - DeviceServiceRoot

@implementation DeviceServiceRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - DeviceServiceRoot_FileDescriptor

static GPBFileDescriptor *DeviceServiceRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - DeviceRequest

@implementation DeviceRequest

@dynamic deviceId;
@dynamic token;
@dynamic appVersion;
@dynamic device;

typedef struct DeviceRequest__storage_ {
  uint32_t _has_storage_[1];
  DeviceEnum device;
  NSString *deviceId;
  NSString *token;
  NSString *appVersion;
} DeviceRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "deviceId",
        .dataTypeSpecific.clazz = Nil,
        .number = DeviceRequest_FieldNumber_DeviceId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DeviceRequest__storage_, deviceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "token",
        .dataTypeSpecific.clazz = Nil,
        .number = DeviceRequest_FieldNumber_Token,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DeviceRequest__storage_, token),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appVersion",
        .dataTypeSpecific.clazz = Nil,
        .number = DeviceRequest_FieldNumber_AppVersion,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DeviceRequest__storage_, appVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "device",
        .dataTypeSpecific.enumDescFunc = DeviceEnum_EnumDescriptor,
        .number = DeviceRequest_FieldNumber_Device,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DeviceRequest__storage_, device),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeviceRequest class]
                                     rootClass:[DeviceServiceRoot class]
                                          file:DeviceServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DeviceRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t DeviceRequest_Device_RawValue(DeviceRequest *message) {
  GPBDescriptor *descriptor = [DeviceRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DeviceRequest_FieldNumber_Device];
  return GPBGetMessageRawEnumField(message, field);
}

void SetDeviceRequest_Device_RawValue(DeviceRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [DeviceRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DeviceRequest_FieldNumber_Device];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - DeviceResponse

@implementation DeviceResponse


typedef struct DeviceResponse__storage_ {
  uint32_t _has_storage_[1];
} DeviceResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeviceResponse class]
                                     rootClass:[DeviceServiceRoot class]
                                          file:DeviceServiceRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(DeviceResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
