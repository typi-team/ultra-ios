// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_service.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "FileService.pbobjc.h"
#import "enumerated/Enumerated.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - FileServiceRoot

@implementation FileServiceRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - FileServiceRoot_FileDescriptor

static GPBFileDescriptor *FileServiceRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - FileCreateRequest

@implementation FileCreateRequest

@dynamic name;
@dynamic size;
@dynamic mimeType;

typedef struct FileCreateRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *mimeType;
  int64_t size;
} FileCreateRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = FileCreateRequest_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FileCreateRequest__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "size",
        .dataTypeSpecific.clazz = Nil,
        .number = FileCreateRequest_FieldNumber_Size,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FileCreateRequest__storage_, size),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "mimeType",
        .dataTypeSpecific.clazz = Nil,
        .number = FileCreateRequest_FieldNumber_MimeType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FileCreateRequest__storage_, mimeType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FileCreateRequest class]
                                     rootClass:[FileServiceRoot class]
                                          file:FileServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FileCreateRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FileDownloadRequest

@implementation FileDownloadRequest

@dynamic fileId;
@dynamic fromChunkNumber;
@dynamic toChunkNumber;

typedef struct FileDownloadRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *fileId;
  int64_t fromChunkNumber;
  int64_t toChunkNumber;
} FileDownloadRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fileId",
        .dataTypeSpecific.clazz = Nil,
        .number = FileDownloadRequest_FieldNumber_FileId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FileDownloadRequest__storage_, fileId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fromChunkNumber",
        .dataTypeSpecific.clazz = Nil,
        .number = FileDownloadRequest_FieldNumber_FromChunkNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FileDownloadRequest__storage_, fromChunkNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "toChunkNumber",
        .dataTypeSpecific.clazz = Nil,
        .number = FileDownloadRequest_FieldNumber_ToChunkNumber,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FileDownloadRequest__storage_, toChunkNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FileDownloadRequest class]
                                     rootClass:[FileServiceRoot class]
                                          file:FileServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FileDownloadRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FileCreateResponse

@implementation FileCreateResponse

@dynamic fileId;
@dynamic chunkSize;

typedef struct FileCreateResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *fileId;
  int64_t chunkSize;
} FileCreateResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fileId",
        .dataTypeSpecific.clazz = Nil,
        .number = FileCreateResponse_FieldNumber_FileId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FileCreateResponse__storage_, fileId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "chunkSize",
        .dataTypeSpecific.clazz = Nil,
        .number = FileCreateResponse_FieldNumber_ChunkSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FileCreateResponse__storage_, chunkSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FileCreateResponse class]
                                     rootClass:[FileServiceRoot class]
                                          file:FileServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FileCreateResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FileUploadAcceptedChunks

@implementation FileUploadAcceptedChunks

@dynamic fileId;
@dynamic acceptedChunksArray, acceptedChunksArray_Count;

typedef struct FileUploadAcceptedChunks__storage_ {
  uint32_t _has_storage_[1];
  NSString *fileId;
  GPBInt64Array *acceptedChunksArray;
} FileUploadAcceptedChunks__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fileId",
        .dataTypeSpecific.clazz = Nil,
        .number = FileUploadAcceptedChunks_FieldNumber_FileId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FileUploadAcceptedChunks__storage_, fileId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "acceptedChunksArray",
        .dataTypeSpecific.clazz = Nil,
        .number = FileUploadAcceptedChunks_FieldNumber_AcceptedChunksArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FileUploadAcceptedChunks__storage_, acceptedChunksArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FileUploadAcceptedChunks class]
                                     rootClass:[FileServiceRoot class]
                                          file:FileServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FileUploadAcceptedChunks__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FileUploadResponse

@implementation FileUploadResponse


typedef struct FileUploadResponse__storage_ {
  uint32_t _has_storage_[1];
} FileUploadResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FileUploadResponse class]
                                     rootClass:[FileServiceRoot class]
                                          file:FileServiceRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(FileUploadResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FileChunk

@implementation FileChunk

@dynamic fileId;
@dynamic data_p;
@dynamic seqNum;

typedef struct FileChunk__storage_ {
  uint32_t _has_storage_[1];
  NSString *fileId;
  NSData *data_p;
  int64_t seqNum;
} FileChunk__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fileId",
        .dataTypeSpecific.clazz = Nil,
        .number = FileChunk_FieldNumber_FileId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FileChunk__storage_, fileId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = Nil,
        .number = FileChunk_FieldNumber_Data_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FileChunk__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "seqNum",
        .dataTypeSpecific.clazz = Nil,
        .number = FileChunk_FieldNumber_SeqNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FileChunk__storage_, seqNum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FileChunk class]
                                     rootClass:[FileServiceRoot class]
                                          file:FileServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FileChunk__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetUploadedChunksRequest

@implementation GetUploadedChunksRequest

@dynamic fileId;

typedef struct GetUploadedChunksRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *fileId;
} GetUploadedChunksRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fileId",
        .dataTypeSpecific.clazz = Nil,
        .number = GetUploadedChunksRequest_FieldNumber_FileId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetUploadedChunksRequest__storage_, fileId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetUploadedChunksRequest class]
                                     rootClass:[FileServiceRoot class]
                                          file:FileServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetUploadedChunksRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetUploadedChunksResponse

@implementation GetUploadedChunksResponse

@dynamic chunksArray, chunksArray_Count;

typedef struct GetUploadedChunksResponse__storage_ {
  uint32_t _has_storage_[1];
  GPBInt64Array *chunksArray;
} GetUploadedChunksResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chunksArray",
        .dataTypeSpecific.clazz = Nil,
        .number = GetUploadedChunksResponse_FieldNumber_ChunksArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetUploadedChunksResponse__storage_, chunksArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetUploadedChunksResponse class]
                                     rootClass:[FileServiceRoot class]
                                          file:FileServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetUploadedChunksResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PhotoDownloadRequest

@implementation PhotoDownloadRequest

@dynamic fileId;
@dynamic size;

typedef struct PhotoDownloadRequest__storage_ {
  uint32_t _has_storage_[1];
  PhotoSize size;
  NSString *fileId;
} PhotoDownloadRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fileId",
        .dataTypeSpecific.clazz = Nil,
        .number = PhotoDownloadRequest_FieldNumber_FileId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PhotoDownloadRequest__storage_, fileId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "size",
        .dataTypeSpecific.enumDescFunc = PhotoSize_EnumDescriptor,
        .number = PhotoDownloadRequest_FieldNumber_Size,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PhotoDownloadRequest__storage_, size),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PhotoDownloadRequest class]
                                     rootClass:[FileServiceRoot class]
                                          file:FileServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PhotoDownloadRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PhotoDownloadRequest_Size_RawValue(PhotoDownloadRequest *message) {
  GPBDescriptor *descriptor = [PhotoDownloadRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PhotoDownloadRequest_FieldNumber_Size];
  return GPBGetMessageRawEnumField(message, field);
}

void SetPhotoDownloadRequest_Size_RawValue(PhotoDownloadRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [PhotoDownloadRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PhotoDownloadRequest_FieldNumber_Size];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
