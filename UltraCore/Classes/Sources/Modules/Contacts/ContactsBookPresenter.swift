//
//  ContactsBookPresenter.swift
//  Pods
//
//  Created by Slam on 4/21/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//
import RxSwift
import Foundation

final class ContactsBookPresenter {
    
    // MARK: - Public properties -

    var contacts: BehaviorSubject<[ContactDisplayable]> = .init(value: [])

    // MARK: - Private properties -

    fileprivate let disposeBag = DisposeBag()
    private unowned let view: ContactsBookViewInterface
    private let wireframe: ContactsBookWireframeInterface
    fileprivate let bookContacts: UseCase<Void, ContactsBookInteractor.Contacts>

    // MARK: - Lifecycle -

    init(view: ContactsBookViewInterface,
         wireframe: ContactsBookWireframeInterface,
         bookContacts: UseCase<Void, ContactsBookInteractor.Contacts>) {
        self.view = view
        self.wireframe = wireframe
        self.bookContacts = bookContacts
    }
}

// MARK: - Extensions -

extension ContactsBookPresenter: ContactsBookPresenterInterface {
     
    func initial() {
        self.bookContacts
            .executeSingle(params: ())
            .subscribe(on: ConcurrentDispatchQueueScheduler(qos: .background))
            .observe(on: MainScheduler.instance)
            .subscribe(onSuccess: { result in
                switch result {
                case let .authorized(contacts: contacts):
                    
                    var request = ContactRequest.init()
                    request.contacts = contacts
                    
                    ContactServiceNIOClient(channel: AppSettingsImpl.shared.channel).insertContacts(request).response.whenComplete { result in
                        switch result {
                        case .success(let response):
                            print(response)
                        case .failure(let error):
                            print(error.localizedDescription)
                        }
                    }
                case .denied:
                    print("denied")
                }
            })
            .disposed(by: self.disposeBag)
    }
}
