//
//  ConversationsPresenter.swift
//  Pods
//
//  Created by Slam on 4/20/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import RxSwift
import Foundation
import RealmSwift

final class ConversationsPresenter: BasePresenter {

    // MARK: - Private properties -
    private let updateRepository: UpdateRepository
    private let messageRepository: MessageRepository
    private unowned let view: ConversationsViewInterface
    private let wireframe: ConversationsWireframeInterface
    private let conversationRepository: ConversationRepository
    
    lazy var conversation: Observable<Results<DBConversation>> = conversationRepository.conversations()

    // MARK: - Lifecycle -

    init(view: ConversationsViewInterface,
         updateRepository: UpdateRepository,
         messageRepository: MessageRepository,
         wireframe: ConversationsWireframeInterface,
         conversationRepository: ConversationRepository) {
        self.view = view
        self.wireframe = wireframe
        self.updateRepository = updateRepository
        self.messageRepository = messageRepository
        self.conversationRepository = conversationRepository
    }
    
}

// MARK: - Extensions -

extension ConversationsPresenter: ConversationsPresenterInterface {
    func setupUpdateSubscription() {
        self.updateRepository.setupSubscription()
        self.updateRepository.sendPoingByTimer()
    }
    
    func navigate(to conversation: Conversation) {
        self.wireframe.navigateToConversation(with: conversation)
    }
    
    
    func navigateToContacts() {
        self.wireframe.navigateToContacts()
    }
}
