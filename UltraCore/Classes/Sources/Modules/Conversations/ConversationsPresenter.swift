//
//  ConversationsPresenter.swift
//  Pods
//
//  Created by Slam on 4/20/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import RxSwift
import Foundation
import RealmSwift
import IGListKit

final class ConversationsPresenter: BasePresenter {

    // MARK: - Private properties -
    private let reachability = try! Reachability()
    private let updateRepository: UpdateRepository
    private let messageRepository: MessageRepository
    private unowned let view: ConversationsViewInterface
    private let wireframe: ConversationsWireframeInterface
    fileprivate let contactDBService: ContactDBService
    private let conversationRepository: ConversationRepository
    private let retrieveContactStatusesInteractor: UseCase<Void, Void>
    fileprivate let contactByUserIdInteractor: ContactByUserIdInteractor
    fileprivate let userStatusUpdateInteractor: UseCase<Bool, UpdateStatusResponse>
    fileprivate let deleteConversationInteractor: UseCase<(Conversation, Bool), Void>
    fileprivate let contactToCreateChatByPhoneInteractor: ContactToCreateChatByPhoneInteractor
    private let messageSenderInteractor: UseCase<MessageSendRequest, MessageSendResponse>
    private var messageSending: Array<String> = []
    
    lazy var conversation: Observable<[Conversation]> = Observable.combineLatest(conversationRepository.conversations(), updateRepository.typingUsers)
        .map({ conversations, typingUsers in
            return conversations.map { conversation in
                var mutable = conversation
                if let typing = typingUsers[conversation.idintification] {
                    mutable.typingData.removeAll(where: {$0.userId == typing.userId})
                    mutable.typingData.append(typing)
                }
                return mutable
            }
        })
    
    // MARK: - Lifecycle -

    init(view: ConversationsViewInterface,
         updateRepository: UpdateRepository,
         messageRepository: MessageRepository,
         contactDBService: ContactDBService,
         wireframe: ConversationsWireframeInterface,
         conversationRepository: ConversationRepository,
         contactByUserIdInteractor: ContactByUserIdInteractor,
         retrieveContactStatusesInteractor: UseCase<Void, Void>,
         deleteConversationInteractor: UseCase<(Conversation,Bool), Void>,
         contactToCreateChatByPhoneInteractor: ContactToCreateChatByPhoneInteractor,
         userStatusUpdateInteractor: UseCase<Bool, UpdateStatusResponse>,
         messageSenderInteractor: UseCase<MessageSendRequest, MessageSendResponse>) {
        self.view = view
        self.wireframe = wireframe
        self.updateRepository = updateRepository
        self.messageRepository = messageRepository
        self.contactDBService = contactDBService
        self.conversationRepository = conversationRepository
        self.contactByUserIdInteractor = contactByUserIdInteractor
        self.userStatusUpdateInteractor = userStatusUpdateInteractor
        self.deleteConversationInteractor = deleteConversationInteractor
        self.retrieveContactStatusesInteractor = retrieveContactStatusesInteractor
        self.contactToCreateChatByPhoneInteractor = contactToCreateChatByPhoneInteractor
        self.messageSenderInteractor = messageSenderInteractor
    }
}

// MARK: - Extensions -

extension ConversationsPresenter: ConversationsPresenterInterface {
    
    func viewDidLoad() {
        startReachibilityNotifier()
    }
    
    func delete(_ conversation: Conversation, all: Bool) {
        self.deleteConversationInteractor.executeSingle(params: (conversation, all))
            .subscribe(on: ConcurrentDispatchQueueScheduler(qos: .background))
            .observe(on: MainScheduler.instance)
            .subscribe()
            .disposed(by: disposeBag)
    }
    func retrieveContactStatuses() {
        self.retrieveContactStatusesInteractor.execute(params: ())
            .subscribe(on: ConcurrentDispatchQueueScheduler(qos: .background))
            .observe(on: MainScheduler.instance)
            .subscribe()
            .disposed(by: disposeBag)
    }
    
    func updateStatus(is online: Bool) {
        self.userStatusUpdateInteractor.executeSingle(params: online)
            .subscribe(on: ConcurrentDispatchQueueScheduler(qos: .background))
            .observe(on: MainScheduler.instance)
            .subscribe()
            .disposed(by: disposeBag)
    }
    
    func setupUpdateSubscription() {
        self.updateRepository.setupSubscription()
        self.updateRepository.sendPoingByTimer()
    }
    
    func navigate(to conversation: Conversation) {
        self.updateRepository.readAll(in: conversation)
        self.wireframe.navigateToConversation(with: conversation)
    }
    
    
    func navigateToContacts() {
        self.wireframe.navigateToContacts(contactsCallback: { contacts in },
                                          openConverationCallback: { [weak self] userID in
                                              guard let `self` = self else { return }
                                              self.createChatBy(contact: userID)
                                          })
    }
    
    func createChatBy(contact: IContact) {
        self.contactToCreateChatByPhoneInteractor
            .executeSingle(params: contact)
            .flatMap({ contactByPhone -> Single<Conversation> in
                self.contactByUserIdInteractor.executeSingle(params: contactByPhone.userID)
                    .flatMap({ contact in
                        self.contactDBService.save(contact: contact).map({contact})
                    }).map({ ConversationImpl(contact: $0, idintification: contactByPhone.chatID) })
                    
            })
            .subscribe(on: ConcurrentDispatchQueueScheduler(qos: .background))
            .observe(on: MainScheduler.instance)
            .subscribe(onSuccess: { [weak self] conversation in
                
                self?.wireframe.navigateToConversation(with: conversation)
            })
            .disposed(by: disposeBag)
    }
    
    private func resendMessagesIfNeeded() {
        getAllMessages { [weak self] messages in
            let unsendedMessages = messages.filter { $0.seqNumber == 0 && !$0.isIncome }
            unsendedMessages.forEach { message in
                self?.resendMessage(message: message)
            }
        }
    }

    private func resendMessage(message: Message) {
        guard !messageSending.contains(message.id) else { return }
        messageSending.append(message.id)
        var message = message
        
        var params = MessageSendRequest()
        params.peer.user = .with({ peer in
            peer.userID = message.receiver.userID
        })
        params.message = message
        messageSenderInteractor
            .executeSingle(params: params)
            .flatMap({ [weak self] (response: MessageSendResponse) in
                guard let `self` = self else {
                    throw NSError.selfIsNill
                }
                message.meta.created = response.meta.created
                message.state.delivered = false
                message.state.read = false
                message.seqNumber = response.seqNumber
                return self.messageRepository.update(message: message)
            })
            .subscribe(on: ConcurrentDispatchQueueScheduler(qos: .background))
            .observe(on: MainScheduler.instance)
            .subscribe()
            .disposed(by: self.disposeBag)
    }
    
    private func startReachibilityNotifier() {
        reachability.whenReachable = { [weak self] reachability in
            self?.resendMessagesIfNeeded()
        }
        try? reachability.startNotifier()
    }
    
    private func getAllMessages(onCompletion: @escaping ([Message]) -> Void) {
        messageRepository
            .messages()
            .subscribe(onNext: { messages in
                onCompletion(messages)
            })
            .disposed(by: disposeBag)
    }
    
}
