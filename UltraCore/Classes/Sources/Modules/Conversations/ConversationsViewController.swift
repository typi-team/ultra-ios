//
//  ConversationsViewController.swift
//  Pods
//
//  Created by Slam on 4/20/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import RxSwift
import RxCocoa
import RxDataSources


final class ConversationsViewController: BaseViewController<ConversationsPresenterInterface> {
    
    fileprivate lazy var tableView: UITableView = .init({
        $0.rowHeight = 68
        $0.registerCell(type: ConversationCell.self)
    })
    
    override func setupViews() {
        super.setupViews()
        self.view.addSubview(tableView)
        
        self.navigationItem.rightBarButtonItem = .init(image: .named("conversation_new_icon"),
                                                       style: .plain, target: self,
                                                       action: #selector(self.openContacts))
        
        self.navigationItem.titleView = HeadlineBody({ $0.text = "–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤" })
    }
    
    override func setupConstraints() {
        super.setupConstraints()
        self.tableView.snp.makeConstraints { make in
            make.edges.equalToSuperview()
        }
    }
    
    override func setupInitialData() {
        self.presenter?.conversation
            .observe(on: MainScheduler.instance)
            .bind(to: tableView.rx.items) { tableView, index, model in
                let cell: ConversationCell = tableView.dequeueCell()
                cell.setup(conversation: model)
                return cell
            }
            .disposed(by: self.disposeBag)
        
        self.tableView
            .rx.itemSelected
            .subscribe { [weak self] (index: IndexPath) in
                guard let `self` = self else { return }
                self.tableView.deselectRow(at: index, animated: true)
            }
            .disposed(by: disposeBag)

        self.tableView.rx
            .modelSelected(Conversation.self)
            .subscribe { [weak self](conversation: Conversation) in
                guard let `self` = self else { return }
                self.presenter?.navigate(to: conversation)
            }
            .disposed(by: disposeBag)
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
//        self.presenter?.navigateToConversation(with: DummyConversationImpl.init() )
    }
}

// MARK: - Extensions -

extension ConversationsViewController {
    @objc func openContacts(_ sender: Any) {
        self.presenter?.navigateToContacts()
    }
}


extension ConversationsViewController: ConversationsViewInterface {
}
