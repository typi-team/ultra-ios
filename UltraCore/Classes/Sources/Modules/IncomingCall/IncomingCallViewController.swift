//
//  IncomingCallViewController.swift
//  Pods
//
//  Created by Slam on 9/4/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import LiveKitClient

final class IncomingCallViewController: BaseViewController<IncomingCallPresenterInterface> {
    
    fileprivate lazy var room = Room(delegate: self)
    
    fileprivate var displayLink: CADisplayLink?
    
    fileprivate var date: Date?
    
    fileprivate lazy var localVideoView: VideoView = .init({
        $0.isHidden = true
        $0.cornerRadius = kLowPadding
    })

    fileprivate lazy var remoteVideoView: VideoView = .init({
        $0.isHidden = true
        $0.cornerRadius = kLowPadding
    })

    fileprivate lazy var style: CallPageStyle = UltraCoreStyle.callingConfig

    fileprivate lazy var infoView = IncomingCallInfoView(style: style)

    fileprivate lazy var actionStackView = IncomingCallActionView(style: style, delegate: self)

    override func viewDidLoad() {
        super.viewDidLoad()

        view.backgroundColor = style.background.color
    }

    override func setupViews() {
        super.setupViews()

        view.addSubview(remoteVideoView)
        view.addSubview(infoView)
        view.addSubview(actionStackView)
        view.addSubview(localVideoView)
    }

    override func setupConstraints() {
        super.setupConstraints()

        actionStackView.snp.makeConstraints { make in
            make.bottom.equalToSuperview().offset(-54)
            make.left.equalToSuperview().offset(kHeadlinePadding)
            make.right.equalToSuperview().offset(-kHeadlinePadding)
            make.height.equalTo(52)
        }
        infoView.snp.makeConstraints { make in
            make.leading.trailing.equalToSuperview()
            make.bottom.equalTo(view.snp.centerY).offset(-36)
        }
        remoteVideoView.snp.makeConstraints { make in
            make.edges.equalToSuperview()
        }
        localVideoView.snp.makeConstraints { make in
            make.trailing.equalToSuperview().inset(31)
            make.bottom.equalTo(actionStackView.snp.top).offset(-32)
            make.width.equalTo(90)
            make.height.equalTo(150)
        }
    }

    override func setupInitialData() {
        super.setupInitialData()

        presenter?.viewDidLoad()
        guard let status = presenter?.getCallStatus() else { return }
        actionStackView.configure(status: status)
        
        switch status {
        case let .incoming(request):
            room.localParticipant?.setCamera(enabled: request.video)
        case let .outcoming(request):
            infoView.setDuration(text: CallStrings.connecting.localized)
            room.localParticipant?.setCamera(enabled: request.video)
        }
    }

    deinit {
        endTimer()
        room.disconnect()
    }
}

// MARK: - IncomingCallActionViewDelegate

extension IncomingCallViewController: IncomingCallActionViewDelegate {
    
    func view(_ view: IncomingCallActionView, answerButtonDidTap button: UIButton) {
        guard let callStatus = presenter?.getCallStatus() else { return }
        connectRoom(with: callStatus.callInfo)
    }
    
    func view(_ view: IncomingCallActionView, mouthpieceButtonDidTap button: UIButton) {
//        _ = room.localParticipant?.isSpeaking = button.isSelected
    }
    
    func view(_ view: IncomingCallActionView, microButtonDidTap button: UIButton) {
        room.localParticipant?.setMicrophone(enabled: !button.isSelected)
    }
    
    func view(_ view: IncomingCallActionView, cameraButtonDidTap button: UIButton) {
        let cameraEnabled = button.isSelected
        room.localParticipant?.setCamera(enabled: cameraEnabled)
        infoView.isHidden = cameraEnabled
        localVideoView.isHidden = !cameraEnabled
    }
    
    func view(_ view: IncomingCallActionView, cancelButtonDidTap button: UIButton) {
        infoView.setDuration(text: "Close connection")
        presenter?.cancel()
    }
    
    func view(_ view: IncomingCallActionView, rejectButtonDidTap button: UIButton) {
        infoView.setDuration(text: "Reject connection")
        presenter?.reject()
    }
    
}

// MARK: - IncomingCallViewInterface

extension IncomingCallViewController: IncomingCallViewInterface {
    
    func connectRoom(with callInfo: CallInformation) {
        room.connect(callInfo.host, callInfo.accessToken).then { [weak self] room in
            guard let self, let status = presenter?.getCallStatus() else { return }
            room.localParticipant?.setCamera(enabled: callInfo.video)
            room.localParticipant?.setMicrophone(enabled: false)
            switch status {
            case .incoming:
                DispatchQueue.main.async { [weak self] in
                    guard let self else { return }
                    infoView.hidePhoneNumber()
                    actionStackView.setAsActive()
                    startTimer()
                }
            default:
                break
            }
        }.catch { error in
            self.dismiss(animated: true)
        }
    }

    func disconnectRoom() {
        self.room.disconnect().then({[weak self] () in
            self?.navigationController?.popViewController(animated: true)
        }).catch { [weak self] error  in
            self?.navigationController?.popViewController(animated: true)
        }
    }

    func dispay(view contact: ContactDisplayable) {
        infoView.confige(view: contact)
    }
}

// MARK: - RoomDelegate

extension IncomingCallViewController: RoomDelegate {
    
    func room(_ room: Room, participantDidJoin participant: RemoteParticipant) {
        DispatchQueue.main.async { [weak self] in
            guard let self else { return }
            infoView.hidePhoneNumber()
            actionStackView.setAsActive()
            startTimer()
        }
    }
    
    func room(_ room: Room, participantDidLeave participant: RemoteParticipant) {
        DispatchQueue.main.async { [weak self] in
            guard let self else { return }
            endTimer()
            disconnectRoom()
        }
    }
    
    func room(_ room: Room, localParticipant: LocalParticipant, didPublish publication: LocalTrackPublication) {
        guard publication.track is VideoTrack else {
            return
        }
        configureParticipantTrack(isHidden: false)
    }
 
    func room(_ room: Room, participant: RemoteParticipant, didSubscribe publication: RemoteTrackPublication, track: Track) {
        guard track is VideoTrack else {
            remoteVideoView.isHidden = true
            return
        }
        configureParticipantTrack(isHidden: false)
    }
    
    func room(_ room: Room, participant: Participant, didUpdate publication: TrackPublication, muted: Bool) {
        guard publication.track is VideoTrack else {
            return
        }
        configureParticipantTrack(isHidden: muted)
    }
    
    private func configureParticipantTrack(isHidden: Bool) {
        let remoteParticipant = room.remoteParticipants.first?.value
        let localParticipant = room.localParticipant
        DispatchQueue.main.async { [weak self] in
            guard let self else { return }
            if remoteParticipant?.isCameraEnabled() ?? false && localParticipant?.isCameraEnabled() ?? false {
                remoteVideoView.track = remoteParticipant?.videoTracks.first?.track as? VideoTrack
                localVideoView.track = localParticipant?.videoTracks.first?.track as? VideoTrack
                remoteVideoView.isHidden = isHidden
                localVideoView.isHidden = isHidden
                infoView.isHidden = !isHidden
            } else {
                if localParticipant?.isCameraEnabled() ?? false {
                    remoteVideoView.track = localParticipant?.videoTracks.first?.track as? VideoTrack
                    remoteVideoView.isHidden = isHidden
                } else {
                    remoteVideoView.isHidden = true
                    localVideoView.isHidden = true
                    infoView.isHidden = false
                }
            }
        }
    }
    
    private func startTimer() {
        guard displayLink == nil else { return }

        displayLink = CADisplayLink(target: self, selector: #selector(displayRefreshed))
        displayLink?.add(to: .main, forMode: .default)
        date = Date()
    }

    @objc
    private func displayRefreshed(displayLink: CADisplayLink) {
        guard let startDate = date else { return }
        let elepsadeTime = Int(Date().timeIntervalSince(startDate).rounded(.toNearestOrEven))
        infoView.setDuration(text: timeFormatted(elepsadeTime))
    }

    func endTimer() {
        displayLink?.invalidate()
        displayLink = nil
        date = nil
    }
    
    private func timeFormatted(_ second: Int) -> String {
        let seconds: Int = second % 60
        let minutes: Int = (second / 60) % 60
        return String(format: "%02d:%02d", minutes, seconds)
    }

    func room(_ room: Room, didUpdate metadata: String?) {
        PP.debug(metadata ?? "as")
    }
    
}

//MARK: - Extensions

private extension ConnectionState {
    var desctiption: String {
        switch self {
        case .connected:
            return CallStrings.connected.localized
        case .disconnected:
            return CallStrings.disconnected.localized
        case .connecting:
            return CallStrings.connecting.localized
        case .reconnecting:
            return CallStrings.reconnecting.localized
        }
    }
}
