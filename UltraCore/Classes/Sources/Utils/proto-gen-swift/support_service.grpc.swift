//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: support_service.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// SupportService provides methods to manage support managers
/// and support chat statuses.
///
/// Usage: instantiate `SupportServiceClient`, then call methods of this protocol to make API calls.
internal protocol SupportServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: SupportServiceClientInterceptorFactoryProtocol? { get }

  func setManagerUsers(
    _ request: SupportSetManagersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<SupportSetManagersRequest, SupportSetManagersResponse>

  func assignManager(
    _ request: SupportAssignManagerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<SupportAssignManagerRequest, SupportAssignManagerResponse>

  func statusUpdate(
    _ request: SupportStatusUpdateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<SupportStatusUpdateRequest, SupportStatusUpdateResponse>
}

extension SupportServiceClientProtocol {
  internal var serviceName: String {
    return "SupportService"
  }

  /// Marks provided users as Support managers and returns list of users
  ///
  /// - Parameters:
  ///   - request: Request to send to SetManagerUsers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setManagerUsers(
    _ request: SupportSetManagersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SupportSetManagersRequest, SupportSetManagersResponse> {
    return self.makeUnaryCall(
      path: SupportServiceClientMetadata.Methods.setManagerUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetManagerUsersInterceptors() ?? []
    )
  }

  /// Assign support manager as responsible to support chat. Assigned manager
  /// will be able to send messages to support chat
  ///
  /// - Parameters:
  ///   - request: Request to send to AssignManager.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func assignManager(
    _ request: SupportAssignManagerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SupportAssignManagerRequest, SupportAssignManagerResponse> {
    return self.makeUnaryCall(
      path: SupportServiceClientMetadata.Methods.assignManager.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAssignManagerInterceptors() ?? []
    )
  }

  /// Change status of support chat
  ///
  /// - Parameters:
  ///   - request: Request to send to StatusUpdate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func statusUpdate(
    _ request: SupportStatusUpdateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SupportStatusUpdateRequest, SupportStatusUpdateResponse> {
    return self.makeUnaryCall(
      path: SupportServiceClientMetadata.Methods.statusUpdate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStatusUpdateInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension SupportServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "SupportServiceNIOClient")
internal final class SupportServiceClient: SupportServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: SupportServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: SupportServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the SupportService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: SupportServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct SupportServiceNIOClient: SupportServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: SupportServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the SupportService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: SupportServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// SupportService provides methods to manage support managers
/// and support chat statuses.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol SupportServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: SupportServiceClientInterceptorFactoryProtocol? { get }

  func makeSetManagerUsersCall(
    _ request: SupportSetManagersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SupportSetManagersRequest, SupportSetManagersResponse>

  func makeAssignManagerCall(
    _ request: SupportAssignManagerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SupportAssignManagerRequest, SupportAssignManagerResponse>

  func makeStatusUpdateCall(
    _ request: SupportStatusUpdateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SupportStatusUpdateRequest, SupportStatusUpdateResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension SupportServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return SupportServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: SupportServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeSetManagerUsersCall(
    _ request: SupportSetManagersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SupportSetManagersRequest, SupportSetManagersResponse> {
    return self.makeAsyncUnaryCall(
      path: SupportServiceClientMetadata.Methods.setManagerUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetManagerUsersInterceptors() ?? []
    )
  }

  internal func makeAssignManagerCall(
    _ request: SupportAssignManagerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SupportAssignManagerRequest, SupportAssignManagerResponse> {
    return self.makeAsyncUnaryCall(
      path: SupportServiceClientMetadata.Methods.assignManager.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAssignManagerInterceptors() ?? []
    )
  }

  internal func makeStatusUpdateCall(
    _ request: SupportStatusUpdateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SupportStatusUpdateRequest, SupportStatusUpdateResponse> {
    return self.makeAsyncUnaryCall(
      path: SupportServiceClientMetadata.Methods.statusUpdate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStatusUpdateInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension SupportServiceAsyncClientProtocol {
  internal func setManagerUsers(
    _ request: SupportSetManagersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SupportSetManagersResponse {
    return try await self.performAsyncUnaryCall(
      path: SupportServiceClientMetadata.Methods.setManagerUsers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetManagerUsersInterceptors() ?? []
    )
  }

  internal func assignManager(
    _ request: SupportAssignManagerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SupportAssignManagerResponse {
    return try await self.performAsyncUnaryCall(
      path: SupportServiceClientMetadata.Methods.assignManager.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAssignManagerInterceptors() ?? []
    )
  }

  internal func statusUpdate(
    _ request: SupportStatusUpdateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SupportStatusUpdateResponse {
    return try await self.performAsyncUnaryCall(
      path: SupportServiceClientMetadata.Methods.statusUpdate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStatusUpdateInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct SupportServiceAsyncClient: SupportServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: SupportServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: SupportServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol SupportServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'setManagerUsers'.
  func makeSetManagerUsersInterceptors() -> [ClientInterceptor<SupportSetManagersRequest, SupportSetManagersResponse>]

  /// - Returns: Interceptors to use when invoking 'assignManager'.
  func makeAssignManagerInterceptors() -> [ClientInterceptor<SupportAssignManagerRequest, SupportAssignManagerResponse>]

  /// - Returns: Interceptors to use when invoking 'statusUpdate'.
  func makeStatusUpdateInterceptors() -> [ClientInterceptor<SupportStatusUpdateRequest, SupportStatusUpdateResponse>]
}

internal enum SupportServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "SupportService",
    fullName: "SupportService",
    methods: [
      SupportServiceClientMetadata.Methods.setManagerUsers,
      SupportServiceClientMetadata.Methods.assignManager,
      SupportServiceClientMetadata.Methods.statusUpdate,
    ]
  )

  internal enum Methods {
    internal static let setManagerUsers = GRPCMethodDescriptor(
      name: "SetManagerUsers",
      path: "/SupportService/SetManagerUsers",
      type: GRPCCallType.unary
    )

    internal static let assignManager = GRPCMethodDescriptor(
      name: "AssignManager",
      path: "/SupportService/AssignManager",
      type: GRPCCallType.unary
    )

    internal static let statusUpdate = GRPCMethodDescriptor(
      name: "StatusUpdate",
      path: "/SupportService/StatusUpdate",
      type: GRPCCallType.unary
    )
  }
}

/// SupportService provides methods to manage support managers
/// and support chat statuses.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol SupportServiceProvider: CallHandlerProvider {
  var interceptors: SupportServiceServerInterceptorFactoryProtocol? { get }

  /// Marks provided users as Support managers and returns list of users
  func setManagerUsers(request: SupportSetManagersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SupportSetManagersResponse>

  /// Assign support manager as responsible to support chat. Assigned manager
  /// will be able to send messages to support chat
  func assignManager(request: SupportAssignManagerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SupportAssignManagerResponse>

  /// Change status of support chat
  func statusUpdate(request: SupportStatusUpdateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SupportStatusUpdateResponse>
}

extension SupportServiceProvider {
  internal var serviceName: Substring {
    return SupportServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SetManagerUsers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SupportSetManagersRequest>(),
        responseSerializer: ProtobufSerializer<SupportSetManagersResponse>(),
        interceptors: self.interceptors?.makeSetManagerUsersInterceptors() ?? [],
        userFunction: self.setManagerUsers(request:context:)
      )

    case "AssignManager":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SupportAssignManagerRequest>(),
        responseSerializer: ProtobufSerializer<SupportAssignManagerResponse>(),
        interceptors: self.interceptors?.makeAssignManagerInterceptors() ?? [],
        userFunction: self.assignManager(request:context:)
      )

    case "StatusUpdate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SupportStatusUpdateRequest>(),
        responseSerializer: ProtobufSerializer<SupportStatusUpdateResponse>(),
        interceptors: self.interceptors?.makeStatusUpdateInterceptors() ?? [],
        userFunction: self.statusUpdate(request:context:)
      )

    default:
      return nil
    }
  }
}

/// SupportService provides methods to manage support managers
/// and support chat statuses.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol SupportServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: SupportServiceServerInterceptorFactoryProtocol? { get }

  /// Marks provided users as Support managers and returns list of users
  func setManagerUsers(
    request: SupportSetManagersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SupportSetManagersResponse

  /// Assign support manager as responsible to support chat. Assigned manager
  /// will be able to send messages to support chat
  func assignManager(
    request: SupportAssignManagerRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SupportAssignManagerResponse

  /// Change status of support chat
  func statusUpdate(
    request: SupportStatusUpdateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SupportStatusUpdateResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension SupportServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return SupportServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return SupportServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: SupportServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SetManagerUsers":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SupportSetManagersRequest>(),
        responseSerializer: ProtobufSerializer<SupportSetManagersResponse>(),
        interceptors: self.interceptors?.makeSetManagerUsersInterceptors() ?? [],
        wrapping: { try await self.setManagerUsers(request: $0, context: $1) }
      )

    case "AssignManager":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SupportAssignManagerRequest>(),
        responseSerializer: ProtobufSerializer<SupportAssignManagerResponse>(),
        interceptors: self.interceptors?.makeAssignManagerInterceptors() ?? [],
        wrapping: { try await self.assignManager(request: $0, context: $1) }
      )

    case "StatusUpdate":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SupportStatusUpdateRequest>(),
        responseSerializer: ProtobufSerializer<SupportStatusUpdateResponse>(),
        interceptors: self.interceptors?.makeStatusUpdateInterceptors() ?? [],
        wrapping: { try await self.statusUpdate(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol SupportServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'setManagerUsers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetManagerUsersInterceptors() -> [ServerInterceptor<SupportSetManagersRequest, SupportSetManagersResponse>]

  /// - Returns: Interceptors to use when handling 'assignManager'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAssignManagerInterceptors() -> [ServerInterceptor<SupportAssignManagerRequest, SupportAssignManagerResponse>]

  /// - Returns: Interceptors to use when handling 'statusUpdate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStatusUpdateInterceptors() -> [ServerInterceptor<SupportStatusUpdateRequest, SupportStatusUpdateResponse>]
}

internal enum SupportServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "SupportService",
    fullName: "SupportService",
    methods: [
      SupportServiceServerMetadata.Methods.setManagerUsers,
      SupportServiceServerMetadata.Methods.assignManager,
      SupportServiceServerMetadata.Methods.statusUpdate,
    ]
  )

  internal enum Methods {
    internal static let setManagerUsers = GRPCMethodDescriptor(
      name: "SetManagerUsers",
      path: "/SupportService/SetManagerUsers",
      type: GRPCCallType.unary
    )

    internal static let assignManager = GRPCMethodDescriptor(
      name: "AssignManager",
      path: "/SupportService/AssignManager",
      type: GRPCCallType.unary
    )

    internal static let statusUpdate = GRPCMethodDescriptor(
      name: "StatusUpdate",
      path: "/SupportService/StatusUpdate",
      type: GRPCCallType.unary
    )
  }
}
