// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: common/user.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct UserState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var state: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct User {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var nickname: String {
    get {return _storage._nickname}
    set {_uniqueStorage()._nickname = newValue}
  }

  var firstname: String {
    get {return _storage._firstname}
    set {_uniqueStorage()._firstname = newValue}
  }

  var lastname: String {
    get {return _storage._lastname}
    set {_uniqueStorage()._lastname = newValue}
  }

  var phone: String {
    get {return _storage._phone}
    set {_uniqueStorage()._phone = newValue}
  }

  var photo: Photo {
    get {return _storage._photo ?? Photo()}
    set {_uniqueStorage()._photo = newValue}
  }
  /// Returns true if `photo` has been explicitly set.
  var hasPhoto: Bool {return _storage._photo != nil}
  /// Clears the value of `photo`. Subsequent reads from it will return its default value.
  mutating func clearPhoto() {_uniqueStorage()._photo = nil}

  var unread: UInt64 {
    get {return _storage._unread}
    set {_uniqueStorage()._unread = newValue}
  }

  var isBlocked: Bool {
    get {return _storage._isBlocked}
    set {_uniqueStorage()._isBlocked = newValue}
  }

  var type: UserTypeEnum {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var group: String {
    get {return _storage._group}
    set {_uniqueStorage()._group = newValue}
  }

  var supportReceptions: [String] {
    get {return _storage._supportReceptions}
    set {_uniqueStorage()._supportReceptions = newValue}
  }

  var reception: String {
    get {return _storage._reception}
    set {_uniqueStorage()._reception = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct UserStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userID: String = String()

  /// Current status of user
  var status: UserStatusEnum = .unknown

  /// Last seen, when last time user had active connection
  /// to the server
  var lastSeen: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension UserState: @unchecked Sendable {}
extension User: @unchecked Sendable {}
extension UserStatus: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension UserState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "UserState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "state"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.state) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.state != 0 {
      try visitor.visitSingularUInt64Field(value: self.state, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: UserState, rhs: UserState) -> Bool {
    if lhs.state != rhs.state {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension User: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "User"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "nickname"),
    3: .same(proto: "firstname"),
    4: .same(proto: "lastname"),
    5: .same(proto: "phone"),
    6: .same(proto: "photo"),
    7: .same(proto: "unread"),
    8: .standard(proto: "is_blocked"),
    9: .same(proto: "type"),
    10: .same(proto: "group"),
    11: .same(proto: "supportReceptions"),
    12: .same(proto: "reception"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _nickname: String = String()
    var _firstname: String = String()
    var _lastname: String = String()
    var _phone: String = String()
    var _photo: Photo? = nil
    var _unread: UInt64 = 0
    var _isBlocked: Bool = false
    var _type: UserTypeEnum = .userTypeUnknown
    var _group: String = String()
    var _supportReceptions: [String] = []
    var _reception: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _nickname = source._nickname
      _firstname = source._firstname
      _lastname = source._lastname
      _phone = source._phone
      _photo = source._photo
      _unread = source._unread
      _isBlocked = source._isBlocked
      _type = source._type
      _group = source._group
      _supportReceptions = source._supportReceptions
      _reception = source._reception
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._nickname) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._firstname) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._lastname) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._phone) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._photo) }()
        case 7: try { try decoder.decodeSingularUInt64Field(value: &_storage._unread) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._isBlocked) }()
        case 9: try { try decoder.decodeSingularEnumField(value: &_storage._type) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._group) }()
        case 11: try { try decoder.decodeRepeatedStringField(value: &_storage._supportReceptions) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._reception) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._nickname.isEmpty {
        try visitor.visitSingularStringField(value: _storage._nickname, fieldNumber: 2)
      }
      if !_storage._firstname.isEmpty {
        try visitor.visitSingularStringField(value: _storage._firstname, fieldNumber: 3)
      }
      if !_storage._lastname.isEmpty {
        try visitor.visitSingularStringField(value: _storage._lastname, fieldNumber: 4)
      }
      if !_storage._phone.isEmpty {
        try visitor.visitSingularStringField(value: _storage._phone, fieldNumber: 5)
      }
      try { if let v = _storage._photo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      if _storage._unread != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._unread, fieldNumber: 7)
      }
      if _storage._isBlocked != false {
        try visitor.visitSingularBoolField(value: _storage._isBlocked, fieldNumber: 8)
      }
      if _storage._type != .userTypeUnknown {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 9)
      }
      if !_storage._group.isEmpty {
        try visitor.visitSingularStringField(value: _storage._group, fieldNumber: 10)
      }
      if !_storage._supportReceptions.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._supportReceptions, fieldNumber: 11)
      }
      if !_storage._reception.isEmpty {
        try visitor.visitSingularStringField(value: _storage._reception, fieldNumber: 12)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: User, rhs: User) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._nickname != rhs_storage._nickname {return false}
        if _storage._firstname != rhs_storage._firstname {return false}
        if _storage._lastname != rhs_storage._lastname {return false}
        if _storage._phone != rhs_storage._phone {return false}
        if _storage._photo != rhs_storage._photo {return false}
        if _storage._unread != rhs_storage._unread {return false}
        if _storage._isBlocked != rhs_storage._isBlocked {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._group != rhs_storage._group {return false}
        if _storage._supportReceptions != rhs_storage._supportReceptions {return false}
        if _storage._reception != rhs_storage._reception {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension UserStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "UserStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .same(proto: "status"),
    3: .standard(proto: "last_seen"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.userID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.lastSeen) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 1)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    if self.lastSeen != 0 {
      try visitor.visitSingularInt64Field(value: self.lastSeen, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: UserStatus, rhs: UserStatus) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.status != rhs.status {return false}
    if lhs.lastSeen != rhs.lastSeen {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
