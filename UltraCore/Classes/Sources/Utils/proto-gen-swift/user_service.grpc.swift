//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: user_service.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Service provides methods for fetching user information
///
/// Usage: instantiate `UserServiceClient`, then call methods of this protocol to make API calls.
internal protocol UserServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: UserServiceClientInterceptorFactoryProtocol? { get }

  func getMe(
    _ request: GetMeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GetMeRequest, GetMeResponse>

  func getUser(
    _ request: GetUserRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GetUserRequest, GetUserResponse>

  func uploadProfilePhoto(
    _ request: UploadProfilePhotoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<UploadProfilePhotoRequest, UploadProfilePhotoResponse>

  func setStatus(
    _ request: UpdateStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<UpdateStatusRequest, UpdateStatusResponse>

  func blockUser(
    _ request: BlockUnblockRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<BlockUnblockRequest, BlockUnblockResponse>

  func unblockUser(
    _ request: BlockUnblockRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<BlockUnblockRequest, BlockUnblockResponse>

  func deleteProfilePhoto(
    _ request: DeleteProfilePhotoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<DeleteProfilePhotoRequest, DeleteProfilePhotoResponse>

  func getBlockedUsersList(
    _ request: GetBlockedUsersListRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GetBlockedUsersListRequest, GetBlockedUsersListResponse>
}

extension UserServiceClientProtocol {
  internal var serviceName: String {
    return "UserService"
  }

  /// Returns info about authorized user
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMe.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getMe(
    _ request: GetMeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GetMeRequest, GetMeResponse> {
    return self.makeUnaryCall(
      path: UserServiceClientMetadata.Methods.getMe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMeInterceptors() ?? []
    )
  }

  /// Returns info about any user
  ///
  /// - Parameters:
  ///   - request: Request to send to GetUser.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getUser(
    _ request: GetUserRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GetUserRequest, GetUserResponse> {
    return self.makeUnaryCall(
      path: UserServiceClientMetadata.Methods.getUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserInterceptors() ?? []
    )
  }

  /// Update profile photo and send update to all contact owners
  ///
  /// - Parameters:
  ///   - request: Request to send to UploadProfilePhoto.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func uploadProfilePhoto(
    _ request: UploadProfilePhotoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<UploadProfilePhotoRequest, UploadProfilePhotoResponse> {
    return self.makeUnaryCall(
      path: UserServiceClientMetadata.Methods.uploadProfilePhoto.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUploadProfilePhotoInterceptors() ?? []
    )
  }

  /// Set's user status. By default server detects user status when
  /// user have connection and goes offline. Client can change that by calling
  /// this method
  ///
  /// - Parameters:
  ///   - request: Request to send to SetStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setStatus(
    _ request: UpdateStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<UpdateStatusRequest, UpdateStatusResponse> {
    return self.makeUnaryCall(
      path: UserServiceClientMetadata.Methods.setStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetStatusInterceptors() ?? []
    )
  }

  /// Block user by id
  ///
  /// - Parameters:
  ///   - request: Request to send to BlockUser.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func blockUser(
    _ request: BlockUnblockRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<BlockUnblockRequest, BlockUnblockResponse> {
    return self.makeUnaryCall(
      path: UserServiceClientMetadata.Methods.blockUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlockUserInterceptors() ?? []
    )
  }

  /// Unblock user by id
  ///
  /// - Parameters:
  ///   - request: Request to send to UnblockUser.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unblockUser(
    _ request: BlockUnblockRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<BlockUnblockRequest, BlockUnblockResponse> {
    return self.makeUnaryCall(
      path: UserServiceClientMetadata.Methods.unblockUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnblockUserInterceptors() ?? []
    )
  }

  /// Delete profile photo and send update to all contact owners
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteProfilePhoto.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteProfilePhoto(
    _ request: DeleteProfilePhotoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<DeleteProfilePhotoRequest, DeleteProfilePhotoResponse> {
    return self.makeUnaryCall(
      path: UserServiceClientMetadata.Methods.deleteProfilePhoto.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteProfilePhotoInterceptors() ?? []
    )
  }

  /// Get blocked users list
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBlockedUsersList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getBlockedUsersList(
    _ request: GetBlockedUsersListRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GetBlockedUsersListRequest, GetBlockedUsersListResponse> {
    return self.makeUnaryCall(
      path: UserServiceClientMetadata.Methods.getBlockedUsersList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockedUsersListInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension UserServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "UserServiceNIOClient")
internal final class UserServiceClient: UserServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: UserServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: UserServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the UserService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: UserServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct UserServiceNIOClient: UserServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: UserServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the UserService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: UserServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Service provides methods for fetching user information
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol UserServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: UserServiceClientInterceptorFactoryProtocol? { get }

  func makeGetMeCall(
    _ request: GetMeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<GetMeRequest, GetMeResponse>

  func makeGetUserCall(
    _ request: GetUserRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<GetUserRequest, GetUserResponse>

  func makeUploadProfilePhotoCall(
    _ request: UploadProfilePhotoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<UploadProfilePhotoRequest, UploadProfilePhotoResponse>

  func makeSetStatusCall(
    _ request: UpdateStatusRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<UpdateStatusRequest, UpdateStatusResponse>

  func makeBlockUserCall(
    _ request: BlockUnblockRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<BlockUnblockRequest, BlockUnblockResponse>

  func makeUnblockUserCall(
    _ request: BlockUnblockRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<BlockUnblockRequest, BlockUnblockResponse>

  func makeDeleteProfilePhotoCall(
    _ request: DeleteProfilePhotoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<DeleteProfilePhotoRequest, DeleteProfilePhotoResponse>

  func makeGetBlockedUsersListCall(
    _ request: GetBlockedUsersListRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<GetBlockedUsersListRequest, GetBlockedUsersListResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension UserServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return UserServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: UserServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeGetMeCall(
    _ request: GetMeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<GetMeRequest, GetMeResponse> {
    return self.makeAsyncUnaryCall(
      path: UserServiceClientMetadata.Methods.getMe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMeInterceptors() ?? []
    )
  }

  internal func makeGetUserCall(
    _ request: GetUserRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<GetUserRequest, GetUserResponse> {
    return self.makeAsyncUnaryCall(
      path: UserServiceClientMetadata.Methods.getUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserInterceptors() ?? []
    )
  }

  internal func makeUploadProfilePhotoCall(
    _ request: UploadProfilePhotoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<UploadProfilePhotoRequest, UploadProfilePhotoResponse> {
    return self.makeAsyncUnaryCall(
      path: UserServiceClientMetadata.Methods.uploadProfilePhoto.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUploadProfilePhotoInterceptors() ?? []
    )
  }

  internal func makeSetStatusCall(
    _ request: UpdateStatusRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<UpdateStatusRequest, UpdateStatusResponse> {
    return self.makeAsyncUnaryCall(
      path: UserServiceClientMetadata.Methods.setStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetStatusInterceptors() ?? []
    )
  }

  internal func makeBlockUserCall(
    _ request: BlockUnblockRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<BlockUnblockRequest, BlockUnblockResponse> {
    return self.makeAsyncUnaryCall(
      path: UserServiceClientMetadata.Methods.blockUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlockUserInterceptors() ?? []
    )
  }

  internal func makeUnblockUserCall(
    _ request: BlockUnblockRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<BlockUnblockRequest, BlockUnblockResponse> {
    return self.makeAsyncUnaryCall(
      path: UserServiceClientMetadata.Methods.unblockUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnblockUserInterceptors() ?? []
    )
  }

  internal func makeDeleteProfilePhotoCall(
    _ request: DeleteProfilePhotoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<DeleteProfilePhotoRequest, DeleteProfilePhotoResponse> {
    return self.makeAsyncUnaryCall(
      path: UserServiceClientMetadata.Methods.deleteProfilePhoto.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteProfilePhotoInterceptors() ?? []
    )
  }

  internal func makeGetBlockedUsersListCall(
    _ request: GetBlockedUsersListRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<GetBlockedUsersListRequest, GetBlockedUsersListResponse> {
    return self.makeAsyncUnaryCall(
      path: UserServiceClientMetadata.Methods.getBlockedUsersList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockedUsersListInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension UserServiceAsyncClientProtocol {
  internal func getMe(
    _ request: GetMeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> GetMeResponse {
    return try await self.performAsyncUnaryCall(
      path: UserServiceClientMetadata.Methods.getMe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMeInterceptors() ?? []
    )
  }

  internal func getUser(
    _ request: GetUserRequest,
    callOptions: CallOptions? = nil
  ) async throws -> GetUserResponse {
    return try await self.performAsyncUnaryCall(
      path: UserServiceClientMetadata.Methods.getUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserInterceptors() ?? []
    )
  }

  internal func uploadProfilePhoto(
    _ request: UploadProfilePhotoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> UploadProfilePhotoResponse {
    return try await self.performAsyncUnaryCall(
      path: UserServiceClientMetadata.Methods.uploadProfilePhoto.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUploadProfilePhotoInterceptors() ?? []
    )
  }

  internal func setStatus(
    _ request: UpdateStatusRequest,
    callOptions: CallOptions? = nil
  ) async throws -> UpdateStatusResponse {
    return try await self.performAsyncUnaryCall(
      path: UserServiceClientMetadata.Methods.setStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetStatusInterceptors() ?? []
    )
  }

  internal func blockUser(
    _ request: BlockUnblockRequest,
    callOptions: CallOptions? = nil
  ) async throws -> BlockUnblockResponse {
    return try await self.performAsyncUnaryCall(
      path: UserServiceClientMetadata.Methods.blockUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlockUserInterceptors() ?? []
    )
  }

  internal func unblockUser(
    _ request: BlockUnblockRequest,
    callOptions: CallOptions? = nil
  ) async throws -> BlockUnblockResponse {
    return try await self.performAsyncUnaryCall(
      path: UserServiceClientMetadata.Methods.unblockUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnblockUserInterceptors() ?? []
    )
  }

  internal func deleteProfilePhoto(
    _ request: DeleteProfilePhotoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> DeleteProfilePhotoResponse {
    return try await self.performAsyncUnaryCall(
      path: UserServiceClientMetadata.Methods.deleteProfilePhoto.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteProfilePhotoInterceptors() ?? []
    )
  }

  internal func getBlockedUsersList(
    _ request: GetBlockedUsersListRequest,
    callOptions: CallOptions? = nil
  ) async throws -> GetBlockedUsersListResponse {
    return try await self.performAsyncUnaryCall(
      path: UserServiceClientMetadata.Methods.getBlockedUsersList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockedUsersListInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct UserServiceAsyncClient: UserServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: UserServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: UserServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol UserServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getMe'.
  func makeGetMeInterceptors() -> [ClientInterceptor<GetMeRequest, GetMeResponse>]

  /// - Returns: Interceptors to use when invoking 'getUser'.
  func makeGetUserInterceptors() -> [ClientInterceptor<GetUserRequest, GetUserResponse>]

  /// - Returns: Interceptors to use when invoking 'uploadProfilePhoto'.
  func makeUploadProfilePhotoInterceptors() -> [ClientInterceptor<UploadProfilePhotoRequest, UploadProfilePhotoResponse>]

  /// - Returns: Interceptors to use when invoking 'setStatus'.
  func makeSetStatusInterceptors() -> [ClientInterceptor<UpdateStatusRequest, UpdateStatusResponse>]

  /// - Returns: Interceptors to use when invoking 'blockUser'.
  func makeBlockUserInterceptors() -> [ClientInterceptor<BlockUnblockRequest, BlockUnblockResponse>]

  /// - Returns: Interceptors to use when invoking 'unblockUser'.
  func makeUnblockUserInterceptors() -> [ClientInterceptor<BlockUnblockRequest, BlockUnblockResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteProfilePhoto'.
  func makeDeleteProfilePhotoInterceptors() -> [ClientInterceptor<DeleteProfilePhotoRequest, DeleteProfilePhotoResponse>]

  /// - Returns: Interceptors to use when invoking 'getBlockedUsersList'.
  func makeGetBlockedUsersListInterceptors() -> [ClientInterceptor<GetBlockedUsersListRequest, GetBlockedUsersListResponse>]
}

internal enum UserServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "UserService",
    fullName: "UserService",
    methods: [
      UserServiceClientMetadata.Methods.getMe,
      UserServiceClientMetadata.Methods.getUser,
      UserServiceClientMetadata.Methods.uploadProfilePhoto,
      UserServiceClientMetadata.Methods.setStatus,
      UserServiceClientMetadata.Methods.blockUser,
      UserServiceClientMetadata.Methods.unblockUser,
      UserServiceClientMetadata.Methods.deleteProfilePhoto,
      UserServiceClientMetadata.Methods.getBlockedUsersList,
    ]
  )

  internal enum Methods {
    internal static let getMe = GRPCMethodDescriptor(
      name: "GetMe",
      path: "/UserService/GetMe",
      type: GRPCCallType.unary
    )

    internal static let getUser = GRPCMethodDescriptor(
      name: "GetUser",
      path: "/UserService/GetUser",
      type: GRPCCallType.unary
    )

    internal static let uploadProfilePhoto = GRPCMethodDescriptor(
      name: "UploadProfilePhoto",
      path: "/UserService/UploadProfilePhoto",
      type: GRPCCallType.unary
    )

    internal static let setStatus = GRPCMethodDescriptor(
      name: "SetStatus",
      path: "/UserService/SetStatus",
      type: GRPCCallType.unary
    )

    internal static let blockUser = GRPCMethodDescriptor(
      name: "BlockUser",
      path: "/UserService/BlockUser",
      type: GRPCCallType.unary
    )

    internal static let unblockUser = GRPCMethodDescriptor(
      name: "UnblockUser",
      path: "/UserService/UnblockUser",
      type: GRPCCallType.unary
    )

    internal static let deleteProfilePhoto = GRPCMethodDescriptor(
      name: "DeleteProfilePhoto",
      path: "/UserService/DeleteProfilePhoto",
      type: GRPCCallType.unary
    )

    internal static let getBlockedUsersList = GRPCMethodDescriptor(
      name: "GetBlockedUsersList",
      path: "/UserService/GetBlockedUsersList",
      type: GRPCCallType.unary
    )
  }
}

/// Service provides methods for fetching user information
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol UserServiceProvider: CallHandlerProvider {
  var interceptors: UserServiceServerInterceptorFactoryProtocol? { get }

  /// Returns info about authorized user
  func getMe(request: GetMeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GetMeResponse>

  /// Returns info about any user
  func getUser(request: GetUserRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GetUserResponse>

  /// Update profile photo and send update to all contact owners
  func uploadProfilePhoto(request: UploadProfilePhotoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<UploadProfilePhotoResponse>

  /// Set's user status. By default server detects user status when
  /// user have connection and goes offline. Client can change that by calling
  /// this method
  func setStatus(request: UpdateStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<UpdateStatusResponse>

  /// Block user by id
  func blockUser(request: BlockUnblockRequest, context: StatusOnlyCallContext) -> EventLoopFuture<BlockUnblockResponse>

  /// Unblock user by id
  func unblockUser(request: BlockUnblockRequest, context: StatusOnlyCallContext) -> EventLoopFuture<BlockUnblockResponse>

  /// Delete profile photo and send update to all contact owners
  func deleteProfilePhoto(request: DeleteProfilePhotoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<DeleteProfilePhotoResponse>

  /// Get blocked users list
  func getBlockedUsersList(request: GetBlockedUsersListRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GetBlockedUsersListResponse>
}

extension UserServiceProvider {
  internal var serviceName: Substring {
    return UserServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetMe":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GetMeRequest>(),
        responseSerializer: ProtobufSerializer<GetMeResponse>(),
        interceptors: self.interceptors?.makeGetMeInterceptors() ?? [],
        userFunction: self.getMe(request:context:)
      )

    case "GetUser":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GetUserRequest>(),
        responseSerializer: ProtobufSerializer<GetUserResponse>(),
        interceptors: self.interceptors?.makeGetUserInterceptors() ?? [],
        userFunction: self.getUser(request:context:)
      )

    case "UploadProfilePhoto":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<UploadProfilePhotoRequest>(),
        responseSerializer: ProtobufSerializer<UploadProfilePhotoResponse>(),
        interceptors: self.interceptors?.makeUploadProfilePhotoInterceptors() ?? [],
        userFunction: self.uploadProfilePhoto(request:context:)
      )

    case "SetStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<UpdateStatusRequest>(),
        responseSerializer: ProtobufSerializer<UpdateStatusResponse>(),
        interceptors: self.interceptors?.makeSetStatusInterceptors() ?? [],
        userFunction: self.setStatus(request:context:)
      )

    case "BlockUser":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<BlockUnblockRequest>(),
        responseSerializer: ProtobufSerializer<BlockUnblockResponse>(),
        interceptors: self.interceptors?.makeBlockUserInterceptors() ?? [],
        userFunction: self.blockUser(request:context:)
      )

    case "UnblockUser":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<BlockUnblockRequest>(),
        responseSerializer: ProtobufSerializer<BlockUnblockResponse>(),
        interceptors: self.interceptors?.makeUnblockUserInterceptors() ?? [],
        userFunction: self.unblockUser(request:context:)
      )

    case "DeleteProfilePhoto":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<DeleteProfilePhotoRequest>(),
        responseSerializer: ProtobufSerializer<DeleteProfilePhotoResponse>(),
        interceptors: self.interceptors?.makeDeleteProfilePhotoInterceptors() ?? [],
        userFunction: self.deleteProfilePhoto(request:context:)
      )

    case "GetBlockedUsersList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GetBlockedUsersListRequest>(),
        responseSerializer: ProtobufSerializer<GetBlockedUsersListResponse>(),
        interceptors: self.interceptors?.makeGetBlockedUsersListInterceptors() ?? [],
        userFunction: self.getBlockedUsersList(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Service provides methods for fetching user information
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol UserServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: UserServiceServerInterceptorFactoryProtocol? { get }

  /// Returns info about authorized user
  func getMe(
    request: GetMeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> GetMeResponse

  /// Returns info about any user
  func getUser(
    request: GetUserRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> GetUserResponse

  /// Update profile photo and send update to all contact owners
  func uploadProfilePhoto(
    request: UploadProfilePhotoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> UploadProfilePhotoResponse

  /// Set's user status. By default server detects user status when
  /// user have connection and goes offline. Client can change that by calling
  /// this method
  func setStatus(
    request: UpdateStatusRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> UpdateStatusResponse

  /// Block user by id
  func blockUser(
    request: BlockUnblockRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> BlockUnblockResponse

  /// Unblock user by id
  func unblockUser(
    request: BlockUnblockRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> BlockUnblockResponse

  /// Delete profile photo and send update to all contact owners
  func deleteProfilePhoto(
    request: DeleteProfilePhotoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> DeleteProfilePhotoResponse

  /// Get blocked users list
  func getBlockedUsersList(
    request: GetBlockedUsersListRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> GetBlockedUsersListResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension UserServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return UserServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return UserServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: UserServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetMe":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GetMeRequest>(),
        responseSerializer: ProtobufSerializer<GetMeResponse>(),
        interceptors: self.interceptors?.makeGetMeInterceptors() ?? [],
        wrapping: { try await self.getMe(request: $0, context: $1) }
      )

    case "GetUser":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GetUserRequest>(),
        responseSerializer: ProtobufSerializer<GetUserResponse>(),
        interceptors: self.interceptors?.makeGetUserInterceptors() ?? [],
        wrapping: { try await self.getUser(request: $0, context: $1) }
      )

    case "UploadProfilePhoto":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<UploadProfilePhotoRequest>(),
        responseSerializer: ProtobufSerializer<UploadProfilePhotoResponse>(),
        interceptors: self.interceptors?.makeUploadProfilePhotoInterceptors() ?? [],
        wrapping: { try await self.uploadProfilePhoto(request: $0, context: $1) }
      )

    case "SetStatus":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<UpdateStatusRequest>(),
        responseSerializer: ProtobufSerializer<UpdateStatusResponse>(),
        interceptors: self.interceptors?.makeSetStatusInterceptors() ?? [],
        wrapping: { try await self.setStatus(request: $0, context: $1) }
      )

    case "BlockUser":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<BlockUnblockRequest>(),
        responseSerializer: ProtobufSerializer<BlockUnblockResponse>(),
        interceptors: self.interceptors?.makeBlockUserInterceptors() ?? [],
        wrapping: { try await self.blockUser(request: $0, context: $1) }
      )

    case "UnblockUser":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<BlockUnblockRequest>(),
        responseSerializer: ProtobufSerializer<BlockUnblockResponse>(),
        interceptors: self.interceptors?.makeUnblockUserInterceptors() ?? [],
        wrapping: { try await self.unblockUser(request: $0, context: $1) }
      )

    case "DeleteProfilePhoto":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<DeleteProfilePhotoRequest>(),
        responseSerializer: ProtobufSerializer<DeleteProfilePhotoResponse>(),
        interceptors: self.interceptors?.makeDeleteProfilePhotoInterceptors() ?? [],
        wrapping: { try await self.deleteProfilePhoto(request: $0, context: $1) }
      )

    case "GetBlockedUsersList":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GetBlockedUsersListRequest>(),
        responseSerializer: ProtobufSerializer<GetBlockedUsersListResponse>(),
        interceptors: self.interceptors?.makeGetBlockedUsersListInterceptors() ?? [],
        wrapping: { try await self.getBlockedUsersList(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol UserServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'getMe'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetMeInterceptors() -> [ServerInterceptor<GetMeRequest, GetMeResponse>]

  /// - Returns: Interceptors to use when handling 'getUser'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetUserInterceptors() -> [ServerInterceptor<GetUserRequest, GetUserResponse>]

  /// - Returns: Interceptors to use when handling 'uploadProfilePhoto'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUploadProfilePhotoInterceptors() -> [ServerInterceptor<UploadProfilePhotoRequest, UploadProfilePhotoResponse>]

  /// - Returns: Interceptors to use when handling 'setStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetStatusInterceptors() -> [ServerInterceptor<UpdateStatusRequest, UpdateStatusResponse>]

  /// - Returns: Interceptors to use when handling 'blockUser'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBlockUserInterceptors() -> [ServerInterceptor<BlockUnblockRequest, BlockUnblockResponse>]

  /// - Returns: Interceptors to use when handling 'unblockUser'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnblockUserInterceptors() -> [ServerInterceptor<BlockUnblockRequest, BlockUnblockResponse>]

  /// - Returns: Interceptors to use when handling 'deleteProfilePhoto'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteProfilePhotoInterceptors() -> [ServerInterceptor<DeleteProfilePhotoRequest, DeleteProfilePhotoResponse>]

  /// - Returns: Interceptors to use when handling 'getBlockedUsersList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetBlockedUsersListInterceptors() -> [ServerInterceptor<GetBlockedUsersListRequest, GetBlockedUsersListResponse>]
}

internal enum UserServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "UserService",
    fullName: "UserService",
    methods: [
      UserServiceServerMetadata.Methods.getMe,
      UserServiceServerMetadata.Methods.getUser,
      UserServiceServerMetadata.Methods.uploadProfilePhoto,
      UserServiceServerMetadata.Methods.setStatus,
      UserServiceServerMetadata.Methods.blockUser,
      UserServiceServerMetadata.Methods.unblockUser,
      UserServiceServerMetadata.Methods.deleteProfilePhoto,
      UserServiceServerMetadata.Methods.getBlockedUsersList,
    ]
  )

  internal enum Methods {
    internal static let getMe = GRPCMethodDescriptor(
      name: "GetMe",
      path: "/UserService/GetMe",
      type: GRPCCallType.unary
    )

    internal static let getUser = GRPCMethodDescriptor(
      name: "GetUser",
      path: "/UserService/GetUser",
      type: GRPCCallType.unary
    )

    internal static let uploadProfilePhoto = GRPCMethodDescriptor(
      name: "UploadProfilePhoto",
      path: "/UserService/UploadProfilePhoto",
      type: GRPCCallType.unary
    )

    internal static let setStatus = GRPCMethodDescriptor(
      name: "SetStatus",
      path: "/UserService/SetStatus",
      type: GRPCCallType.unary
    )

    internal static let blockUser = GRPCMethodDescriptor(
      name: "BlockUser",
      path: "/UserService/BlockUser",
      type: GRPCCallType.unary
    )

    internal static let unblockUser = GRPCMethodDescriptor(
      name: "UnblockUser",
      path: "/UserService/UnblockUser",
      type: GRPCCallType.unary
    )

    internal static let deleteProfilePhoto = GRPCMethodDescriptor(
      name: "DeleteProfilePhoto",
      path: "/UserService/DeleteProfilePhoto",
      type: GRPCCallType.unary
    )

    internal static let getBlockedUsersList = GRPCMethodDescriptor(
      name: "GetBlockedUsersList",
      path: "/UserService/GetBlockedUsersList",
      type: GRPCCallType.unary
    )
  }
}
