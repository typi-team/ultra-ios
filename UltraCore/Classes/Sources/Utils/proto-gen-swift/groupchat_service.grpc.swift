//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: groupchat_service.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Service to manage groupchats
///
/// Usage: instantiate `GroupchatServiceClient`, then call methods of this protocol to make API calls.
internal protocol GroupchatServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: GroupchatServiceClientInterceptorFactoryProtocol? { get }

  func options(
    _ request: GroupOptionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GroupOptionsRequest, GroupOptionsResponse>

  func create(
    _ request: GroupCreateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GroupCreateRequest, GroupCreateResponse>

  func addMembers(
    _ request: GroupMemberAddRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GroupMemberAddRequest, GroupMemberAddResponse>

  func removeMember(
    _ request: GroupMemberRemoveRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GroupMemberRemoveRequest, GroupMemberRemoveResponse>
}

extension GroupchatServiceClientProtocol {
  internal var serviceName: String {
    return "GroupchatService"
  }

  /// Returns server configuration for groups
  ///
  /// - Parameters:
  ///   - request: Request to send to Options.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func options(
    _ request: GroupOptionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GroupOptionsRequest, GroupOptionsResponse> {
    return self.makeUnaryCall(
      path: GroupchatServiceClientMetadata.Methods.options.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOptionsInterceptors() ?? []
    )
  }

  /// Creates groupchat and returns chat id of newly created chat
  ///
  /// - Parameters:
  ///   - request: Request to send to Create.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func create(
    _ request: GroupCreateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GroupCreateRequest, GroupCreateResponse> {
    return self.makeUnaryCall(
      path: GroupchatServiceClientMetadata.Methods.create.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateInterceptors() ?? []
    )
  }

  /// Adds one or multiple chat members (maximum 20 members at once)
  ///
  /// - Parameters:
  ///   - request: Request to send to AddMembers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addMembers(
    _ request: GroupMemberAddRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GroupMemberAddRequest, GroupMemberAddResponse> {
    return self.makeUnaryCall(
      path: GroupchatServiceClientMetadata.Methods.addMembers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddMembersInterceptors() ?? []
    )
  }

  /// Remove a member from groupchat. Only a user with Admin access
  /// can remove a member
  ///
  /// - Parameters:
  ///   - request: Request to send to RemoveMember.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func removeMember(
    _ request: GroupMemberRemoveRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GroupMemberRemoveRequest, GroupMemberRemoveResponse> {
    return self.makeUnaryCall(
      path: GroupchatServiceClientMetadata.Methods.removeMember.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveMemberInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension GroupchatServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "GroupchatServiceNIOClient")
internal final class GroupchatServiceClient: GroupchatServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: GroupchatServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: GroupchatServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the GroupchatService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: GroupchatServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct GroupchatServiceNIOClient: GroupchatServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: GroupchatServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the GroupchatService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: GroupchatServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Service to manage groupchats
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol GroupchatServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: GroupchatServiceClientInterceptorFactoryProtocol? { get }

  func makeOptionsCall(
    _ request: GroupOptionsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<GroupOptionsRequest, GroupOptionsResponse>

  func makeCreateCall(
    _ request: GroupCreateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<GroupCreateRequest, GroupCreateResponse>

  func makeAddMembersCall(
    _ request: GroupMemberAddRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<GroupMemberAddRequest, GroupMemberAddResponse>

  func makeRemoveMemberCall(
    _ request: GroupMemberRemoveRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<GroupMemberRemoveRequest, GroupMemberRemoveResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension GroupchatServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return GroupchatServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: GroupchatServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeOptionsCall(
    _ request: GroupOptionsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<GroupOptionsRequest, GroupOptionsResponse> {
    return self.makeAsyncUnaryCall(
      path: GroupchatServiceClientMetadata.Methods.options.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOptionsInterceptors() ?? []
    )
  }

  internal func makeCreateCall(
    _ request: GroupCreateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<GroupCreateRequest, GroupCreateResponse> {
    return self.makeAsyncUnaryCall(
      path: GroupchatServiceClientMetadata.Methods.create.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateInterceptors() ?? []
    )
  }

  internal func makeAddMembersCall(
    _ request: GroupMemberAddRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<GroupMemberAddRequest, GroupMemberAddResponse> {
    return self.makeAsyncUnaryCall(
      path: GroupchatServiceClientMetadata.Methods.addMembers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddMembersInterceptors() ?? []
    )
  }

  internal func makeRemoveMemberCall(
    _ request: GroupMemberRemoveRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<GroupMemberRemoveRequest, GroupMemberRemoveResponse> {
    return self.makeAsyncUnaryCall(
      path: GroupchatServiceClientMetadata.Methods.removeMember.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveMemberInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension GroupchatServiceAsyncClientProtocol {
  internal func options(
    _ request: GroupOptionsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> GroupOptionsResponse {
    return try await self.performAsyncUnaryCall(
      path: GroupchatServiceClientMetadata.Methods.options.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOptionsInterceptors() ?? []
    )
  }

  internal func create(
    _ request: GroupCreateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> GroupCreateResponse {
    return try await self.performAsyncUnaryCall(
      path: GroupchatServiceClientMetadata.Methods.create.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateInterceptors() ?? []
    )
  }

  internal func addMembers(
    _ request: GroupMemberAddRequest,
    callOptions: CallOptions? = nil
  ) async throws -> GroupMemberAddResponse {
    return try await self.performAsyncUnaryCall(
      path: GroupchatServiceClientMetadata.Methods.addMembers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddMembersInterceptors() ?? []
    )
  }

  internal func removeMember(
    _ request: GroupMemberRemoveRequest,
    callOptions: CallOptions? = nil
  ) async throws -> GroupMemberRemoveResponse {
    return try await self.performAsyncUnaryCall(
      path: GroupchatServiceClientMetadata.Methods.removeMember.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveMemberInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct GroupchatServiceAsyncClient: GroupchatServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: GroupchatServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: GroupchatServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol GroupchatServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'options'.
  func makeOptionsInterceptors() -> [ClientInterceptor<GroupOptionsRequest, GroupOptionsResponse>]

  /// - Returns: Interceptors to use when invoking 'create'.
  func makeCreateInterceptors() -> [ClientInterceptor<GroupCreateRequest, GroupCreateResponse>]

  /// - Returns: Interceptors to use when invoking 'addMembers'.
  func makeAddMembersInterceptors() -> [ClientInterceptor<GroupMemberAddRequest, GroupMemberAddResponse>]

  /// - Returns: Interceptors to use when invoking 'removeMember'.
  func makeRemoveMemberInterceptors() -> [ClientInterceptor<GroupMemberRemoveRequest, GroupMemberRemoveResponse>]
}

internal enum GroupchatServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "GroupchatService",
    fullName: "GroupchatService",
    methods: [
      GroupchatServiceClientMetadata.Methods.options,
      GroupchatServiceClientMetadata.Methods.create,
      GroupchatServiceClientMetadata.Methods.addMembers,
      GroupchatServiceClientMetadata.Methods.removeMember,
    ]
  )

  internal enum Methods {
    internal static let options = GRPCMethodDescriptor(
      name: "Options",
      path: "/GroupchatService/Options",
      type: GRPCCallType.unary
    )

    internal static let create = GRPCMethodDescriptor(
      name: "Create",
      path: "/GroupchatService/Create",
      type: GRPCCallType.unary
    )

    internal static let addMembers = GRPCMethodDescriptor(
      name: "AddMembers",
      path: "/GroupchatService/AddMembers",
      type: GRPCCallType.unary
    )

    internal static let removeMember = GRPCMethodDescriptor(
      name: "RemoveMember",
      path: "/GroupchatService/RemoveMember",
      type: GRPCCallType.unary
    )
  }
}

/// Service to manage groupchats
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol GroupchatServiceProvider: CallHandlerProvider {
  var interceptors: GroupchatServiceServerInterceptorFactoryProtocol? { get }

  /// Returns server configuration for groups
  func options(request: GroupOptionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GroupOptionsResponse>

  /// Creates groupchat and returns chat id of newly created chat
  func create(request: GroupCreateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GroupCreateResponse>

  /// Adds one or multiple chat members (maximum 20 members at once)
  func addMembers(request: GroupMemberAddRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GroupMemberAddResponse>

  /// Remove a member from groupchat. Only a user with Admin access
  /// can remove a member
  func removeMember(request: GroupMemberRemoveRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GroupMemberRemoveResponse>
}

extension GroupchatServiceProvider {
  internal var serviceName: Substring {
    return GroupchatServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Options":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GroupOptionsRequest>(),
        responseSerializer: ProtobufSerializer<GroupOptionsResponse>(),
        interceptors: self.interceptors?.makeOptionsInterceptors() ?? [],
        userFunction: self.options(request:context:)
      )

    case "Create":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GroupCreateRequest>(),
        responseSerializer: ProtobufSerializer<GroupCreateResponse>(),
        interceptors: self.interceptors?.makeCreateInterceptors() ?? [],
        userFunction: self.create(request:context:)
      )

    case "AddMembers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GroupMemberAddRequest>(),
        responseSerializer: ProtobufSerializer<GroupMemberAddResponse>(),
        interceptors: self.interceptors?.makeAddMembersInterceptors() ?? [],
        userFunction: self.addMembers(request:context:)
      )

    case "RemoveMember":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GroupMemberRemoveRequest>(),
        responseSerializer: ProtobufSerializer<GroupMemberRemoveResponse>(),
        interceptors: self.interceptors?.makeRemoveMemberInterceptors() ?? [],
        userFunction: self.removeMember(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Service to manage groupchats
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol GroupchatServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: GroupchatServiceServerInterceptorFactoryProtocol? { get }

  /// Returns server configuration for groups
  func options(
    request: GroupOptionsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> GroupOptionsResponse

  /// Creates groupchat and returns chat id of newly created chat
  func create(
    request: GroupCreateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> GroupCreateResponse

  /// Adds one or multiple chat members (maximum 20 members at once)
  func addMembers(
    request: GroupMemberAddRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> GroupMemberAddResponse

  /// Remove a member from groupchat. Only a user with Admin access
  /// can remove a member
  func removeMember(
    request: GroupMemberRemoveRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> GroupMemberRemoveResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension GroupchatServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return GroupchatServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return GroupchatServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: GroupchatServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Options":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GroupOptionsRequest>(),
        responseSerializer: ProtobufSerializer<GroupOptionsResponse>(),
        interceptors: self.interceptors?.makeOptionsInterceptors() ?? [],
        wrapping: { try await self.options(request: $0, context: $1) }
      )

    case "Create":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GroupCreateRequest>(),
        responseSerializer: ProtobufSerializer<GroupCreateResponse>(),
        interceptors: self.interceptors?.makeCreateInterceptors() ?? [],
        wrapping: { try await self.create(request: $0, context: $1) }
      )

    case "AddMembers":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GroupMemberAddRequest>(),
        responseSerializer: ProtobufSerializer<GroupMemberAddResponse>(),
        interceptors: self.interceptors?.makeAddMembersInterceptors() ?? [],
        wrapping: { try await self.addMembers(request: $0, context: $1) }
      )

    case "RemoveMember":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GroupMemberRemoveRequest>(),
        responseSerializer: ProtobufSerializer<GroupMemberRemoveResponse>(),
        interceptors: self.interceptors?.makeRemoveMemberInterceptors() ?? [],
        wrapping: { try await self.removeMember(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol GroupchatServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'options'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOptionsInterceptors() -> [ServerInterceptor<GroupOptionsRequest, GroupOptionsResponse>]

  /// - Returns: Interceptors to use when handling 'create'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateInterceptors() -> [ServerInterceptor<GroupCreateRequest, GroupCreateResponse>]

  /// - Returns: Interceptors to use when handling 'addMembers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddMembersInterceptors() -> [ServerInterceptor<GroupMemberAddRequest, GroupMemberAddResponse>]

  /// - Returns: Interceptors to use when handling 'removeMember'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRemoveMemberInterceptors() -> [ServerInterceptor<GroupMemberRemoveRequest, GroupMemberRemoveResponse>]
}

internal enum GroupchatServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "GroupchatService",
    fullName: "GroupchatService",
    methods: [
      GroupchatServiceServerMetadata.Methods.options,
      GroupchatServiceServerMetadata.Methods.create,
      GroupchatServiceServerMetadata.Methods.addMembers,
      GroupchatServiceServerMetadata.Methods.removeMember,
    ]
  )

  internal enum Methods {
    internal static let options = GRPCMethodDescriptor(
      name: "Options",
      path: "/GroupchatService/Options",
      type: GRPCCallType.unary
    )

    internal static let create = GRPCMethodDescriptor(
      name: "Create",
      path: "/GroupchatService/Create",
      type: GRPCCallType.unary
    )

    internal static let addMembers = GRPCMethodDescriptor(
      name: "AddMembers",
      path: "/GroupchatService/AddMembers",
      type: GRPCCallType.unary
    )

    internal static let removeMember = GRPCMethodDescriptor(
      name: "RemoveMember",
      path: "/GroupchatService/RemoveMember",
      type: GRPCCallType.unary
    )
  }
}
