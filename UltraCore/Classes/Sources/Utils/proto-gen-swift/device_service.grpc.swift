//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: device_service.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `DeviceServiceClient`, then call methods of this protocol to make API calls.
internal protocol DeviceServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: DeviceServiceClientInterceptorFactoryProtocol? { get }

  func updateDevice(
    _ request: DeviceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<DeviceRequest, DeviceResponse>

  func deleteDevice(
    _ request: DeleteDeviceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<DeleteDeviceRequest, DeviceResponse>
}

extension DeviceServiceClientProtocol {
  internal var serviceName: String {
    return "DeviceService"
  }

  /// Unary call to UpdateDevice
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateDevice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateDevice(
    _ request: DeviceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<DeviceRequest, DeviceResponse> {
    return self.makeUnaryCall(
      path: DeviceServiceClientMetadata.Methods.updateDevice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateDeviceInterceptors() ?? []
    )
  }

  /// Unary call to DeleteDevice
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteDevice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteDevice(
    _ request: DeleteDeviceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<DeleteDeviceRequest, DeviceResponse> {
    return self.makeUnaryCall(
      path: DeviceServiceClientMetadata.Methods.deleteDevice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteDeviceInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension DeviceServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "DeviceServiceNIOClient")
internal final class DeviceServiceClient: DeviceServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: DeviceServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: DeviceServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the DeviceService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: DeviceServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct DeviceServiceNIOClient: DeviceServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: DeviceServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the DeviceService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: DeviceServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol DeviceServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: DeviceServiceClientInterceptorFactoryProtocol? { get }

  func makeUpdateDeviceCall(
    _ request: DeviceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<DeviceRequest, DeviceResponse>

  func makeDeleteDeviceCall(
    _ request: DeleteDeviceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<DeleteDeviceRequest, DeviceResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension DeviceServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return DeviceServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: DeviceServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeUpdateDeviceCall(
    _ request: DeviceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<DeviceRequest, DeviceResponse> {
    return self.makeAsyncUnaryCall(
      path: DeviceServiceClientMetadata.Methods.updateDevice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateDeviceInterceptors() ?? []
    )
  }

  internal func makeDeleteDeviceCall(
    _ request: DeleteDeviceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<DeleteDeviceRequest, DeviceResponse> {
    return self.makeAsyncUnaryCall(
      path: DeviceServiceClientMetadata.Methods.deleteDevice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteDeviceInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension DeviceServiceAsyncClientProtocol {
  internal func updateDevice(
    _ request: DeviceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> DeviceResponse {
    return try await self.performAsyncUnaryCall(
      path: DeviceServiceClientMetadata.Methods.updateDevice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateDeviceInterceptors() ?? []
    )
  }

  internal func deleteDevice(
    _ request: DeleteDeviceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> DeviceResponse {
    return try await self.performAsyncUnaryCall(
      path: DeviceServiceClientMetadata.Methods.deleteDevice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteDeviceInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct DeviceServiceAsyncClient: DeviceServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: DeviceServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: DeviceServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol DeviceServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'updateDevice'.
  func makeUpdateDeviceInterceptors() -> [ClientInterceptor<DeviceRequest, DeviceResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteDevice'.
  func makeDeleteDeviceInterceptors() -> [ClientInterceptor<DeleteDeviceRequest, DeviceResponse>]
}

internal enum DeviceServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "DeviceService",
    fullName: "DeviceService",
    methods: [
      DeviceServiceClientMetadata.Methods.updateDevice,
      DeviceServiceClientMetadata.Methods.deleteDevice,
    ]
  )

  internal enum Methods {
    internal static let updateDevice = GRPCMethodDescriptor(
      name: "UpdateDevice",
      path: "/DeviceService/UpdateDevice",
      type: GRPCCallType.unary
    )

    internal static let deleteDevice = GRPCMethodDescriptor(
      name: "DeleteDevice",
      path: "/DeviceService/DeleteDevice",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol DeviceServiceProvider: CallHandlerProvider {
  var interceptors: DeviceServiceServerInterceptorFactoryProtocol? { get }

  func updateDevice(request: DeviceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<DeviceResponse>

  func deleteDevice(request: DeleteDeviceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<DeviceResponse>
}

extension DeviceServiceProvider {
  internal var serviceName: Substring {
    return DeviceServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "UpdateDevice":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<DeviceRequest>(),
        responseSerializer: ProtobufSerializer<DeviceResponse>(),
        interceptors: self.interceptors?.makeUpdateDeviceInterceptors() ?? [],
        userFunction: self.updateDevice(request:context:)
      )

    case "DeleteDevice":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<DeleteDeviceRequest>(),
        responseSerializer: ProtobufSerializer<DeviceResponse>(),
        interceptors: self.interceptors?.makeDeleteDeviceInterceptors() ?? [],
        userFunction: self.deleteDevice(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol DeviceServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: DeviceServiceServerInterceptorFactoryProtocol? { get }

  func updateDevice(
    request: DeviceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> DeviceResponse

  func deleteDevice(
    request: DeleteDeviceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> DeviceResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension DeviceServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return DeviceServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return DeviceServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: DeviceServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "UpdateDevice":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<DeviceRequest>(),
        responseSerializer: ProtobufSerializer<DeviceResponse>(),
        interceptors: self.interceptors?.makeUpdateDeviceInterceptors() ?? [],
        wrapping: { try await self.updateDevice(request: $0, context: $1) }
      )

    case "DeleteDevice":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<DeleteDeviceRequest>(),
        responseSerializer: ProtobufSerializer<DeviceResponse>(),
        interceptors: self.interceptors?.makeDeleteDeviceInterceptors() ?? [],
        wrapping: { try await self.deleteDevice(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol DeviceServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'updateDevice'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateDeviceInterceptors() -> [ServerInterceptor<DeviceRequest, DeviceResponse>]

  /// - Returns: Interceptors to use when handling 'deleteDevice'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteDeviceInterceptors() -> [ServerInterceptor<DeleteDeviceRequest, DeviceResponse>]
}

internal enum DeviceServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "DeviceService",
    fullName: "DeviceService",
    methods: [
      DeviceServiceServerMetadata.Methods.updateDevice,
      DeviceServiceServerMetadata.Methods.deleteDevice,
    ]
  )

  internal enum Methods {
    internal static let updateDevice = GRPCMethodDescriptor(
      name: "UpdateDevice",
      path: "/DeviceService/UpdateDevice",
      type: GRPCCallType.unary
    )

    internal static let deleteDevice = GRPCMethodDescriptor(
      name: "DeleteDevice",
      path: "/DeviceService/DeleteDevice",
      type: GRPCCallType.unary
    )
  }
}
