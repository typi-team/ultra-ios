// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: common/update_types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct MessagesDelivered {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chatID: String = String()

  var userID: String = String()

  var maxSeqNumber: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct MessagesRead {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chatID: String = String()

  var userID: String = String()

  var maxSeqNumber: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct MessagesDeleted {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chatID: String = String()

  var range: [MessagesRange] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct UserTyping {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chatID: String = String()

  var userID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct UserAudioRecording {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chatID: String = String()

  var userID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Update {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var state: UInt64 = 0

  var ofUpdate: Update.OneOf_OfUpdate? = nil

  var message: Message {
    get {
      if case .message(let v)? = ofUpdate {return v}
      return Message()
    }
    set {ofUpdate = .message(newValue)}
  }

  var contact: Contact {
    get {
      if case .contact(let v)? = ofUpdate {return v}
      return Contact()
    }
    set {ofUpdate = .contact(newValue)}
  }

  var messagesDelivered: MessagesDelivered {
    get {
      if case .messagesDelivered(let v)? = ofUpdate {return v}
      return MessagesDelivered()
    }
    set {ofUpdate = .messagesDelivered(newValue)}
  }

  var messagesRead: MessagesRead {
    get {
      if case .messagesRead(let v)? = ofUpdate {return v}
      return MessagesRead()
    }
    set {ofUpdate = .messagesRead(newValue)}
  }

  var messagesDeleted: MessagesDeleted {
    get {
      if case .messagesDeleted(let v)? = ofUpdate {return v}
      return MessagesDeleted()
    }
    set {ofUpdate = .messagesDeleted(newValue)}
  }

  var ofPresence: Update.OneOf_OfPresence? = nil

  var typing: UserTyping {
    get {
      if case .typing(let v)? = ofPresence {return v}
      return UserTyping()
    }
    set {ofPresence = .typing(newValue)}
  }

  var audioRecording: UserAudioRecording {
    get {
      if case .audioRecording(let v)? = ofPresence {return v}
      return UserAudioRecording()
    }
    set {ofPresence = .audioRecording(newValue)}
  }

  var userStatus: UserStatus {
    get {
      if case .userStatus(let v)? = ofPresence {return v}
      return UserStatus()
    }
    set {ofPresence = .userStatus(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_OfUpdate: Equatable {
    case message(Message)
    case contact(Contact)
    case messagesDelivered(MessagesDelivered)
    case messagesRead(MessagesRead)
    case messagesDeleted(MessagesDeleted)

  #if !swift(>=4.1)
    static func ==(lhs: Update.OneOf_OfUpdate, rhs: Update.OneOf_OfUpdate) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.message, .message): return {
        guard case .message(let l) = lhs, case .message(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.contact, .contact): return {
        guard case .contact(let l) = lhs, case .contact(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.messagesDelivered, .messagesDelivered): return {
        guard case .messagesDelivered(let l) = lhs, case .messagesDelivered(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.messagesRead, .messagesRead): return {
        guard case .messagesRead(let l) = lhs, case .messagesRead(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.messagesDeleted, .messagesDeleted): return {
        guard case .messagesDeleted(let l) = lhs, case .messagesDeleted(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  enum OneOf_OfPresence: Equatable {
    case typing(UserTyping)
    case audioRecording(UserAudioRecording)
    case userStatus(UserStatus)

  #if !swift(>=4.1)
    static func ==(lhs: Update.OneOf_OfPresence, rhs: Update.OneOf_OfPresence) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.typing, .typing): return {
        guard case .typing(let l) = lhs, case .typing(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.audioRecording, .audioRecording): return {
        guard case .audioRecording(let l) = lhs, case .audioRecording(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.userStatus, .userStatus): return {
        guard case .userStatus(let l) = lhs, case .userStatus(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

struct Updates {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var lastState: UInt64 = 0

  var count: Int64 = 0

  var updates: [Update] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension MessagesDelivered: @unchecked Sendable {}
extension MessagesRead: @unchecked Sendable {}
extension MessagesDeleted: @unchecked Sendable {}
extension UserTyping: @unchecked Sendable {}
extension UserAudioRecording: @unchecked Sendable {}
extension Update: @unchecked Sendable {}
extension Update.OneOf_OfUpdate: @unchecked Sendable {}
extension Update.OneOf_OfPresence: @unchecked Sendable {}
extension Updates: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension MessagesDelivered: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MessagesDelivered"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chat_id"),
    2: .standard(proto: "user_id"),
    3: .standard(proto: "max_seq_number"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chatID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.userID) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.maxSeqNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chatID.isEmpty {
      try visitor.visitSingularStringField(value: self.chatID, fieldNumber: 1)
    }
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 2)
    }
    if self.maxSeqNumber != 0 {
      try visitor.visitSingularUInt64Field(value: self.maxSeqNumber, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MessagesDelivered, rhs: MessagesDelivered) -> Bool {
    if lhs.chatID != rhs.chatID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.maxSeqNumber != rhs.maxSeqNumber {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MessagesRead: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MessagesRead"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chat_id"),
    2: .standard(proto: "user_id"),
    3: .standard(proto: "max_seq_number"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chatID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.userID) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.maxSeqNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chatID.isEmpty {
      try visitor.visitSingularStringField(value: self.chatID, fieldNumber: 1)
    }
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 2)
    }
    if self.maxSeqNumber != 0 {
      try visitor.visitSingularUInt64Field(value: self.maxSeqNumber, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MessagesRead, rhs: MessagesRead) -> Bool {
    if lhs.chatID != rhs.chatID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.maxSeqNumber != rhs.maxSeqNumber {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MessagesDeleted: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MessagesDeleted"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chat_id"),
    2: .same(proto: "range"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chatID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.range) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chatID.isEmpty {
      try visitor.visitSingularStringField(value: self.chatID, fieldNumber: 1)
    }
    if !self.range.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.range, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MessagesDeleted, rhs: MessagesDeleted) -> Bool {
    if lhs.chatID != rhs.chatID {return false}
    if lhs.range != rhs.range {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension UserTyping: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "UserTyping"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chat_id"),
    2: .standard(proto: "user_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chatID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.userID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chatID.isEmpty {
      try visitor.visitSingularStringField(value: self.chatID, fieldNumber: 1)
    }
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: UserTyping, rhs: UserTyping) -> Bool {
    if lhs.chatID != rhs.chatID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension UserAudioRecording: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "UserAudioRecording"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chat_id"),
    2: .standard(proto: "user_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chatID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.userID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chatID.isEmpty {
      try visitor.visitSingularStringField(value: self.chatID, fieldNumber: 1)
    }
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: UserAudioRecording, rhs: UserAudioRecording) -> Bool {
    if lhs.chatID != rhs.chatID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Update: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Update"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "state"),
    3: .same(proto: "message"),
    4: .same(proto: "contact"),
    6: .standard(proto: "messages_delivered"),
    7: .standard(proto: "messages_read"),
    11: .standard(proto: "messages_deleted"),
    8: .same(proto: "typing"),
    9: .same(proto: "audioRecording"),
    10: .standard(proto: "user_status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.state) }()
      case 3: try {
        var v: Message?
        var hadOneofValue = false
        if let current = self.ofUpdate {
          hadOneofValue = true
          if case .message(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.ofUpdate = .message(v)
        }
      }()
      case 4: try {
        var v: Contact?
        var hadOneofValue = false
        if let current = self.ofUpdate {
          hadOneofValue = true
          if case .contact(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.ofUpdate = .contact(v)
        }
      }()
      case 6: try {
        var v: MessagesDelivered?
        var hadOneofValue = false
        if let current = self.ofUpdate {
          hadOneofValue = true
          if case .messagesDelivered(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.ofUpdate = .messagesDelivered(v)
        }
      }()
      case 7: try {
        var v: MessagesRead?
        var hadOneofValue = false
        if let current = self.ofUpdate {
          hadOneofValue = true
          if case .messagesRead(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.ofUpdate = .messagesRead(v)
        }
      }()
      case 8: try {
        var v: UserTyping?
        var hadOneofValue = false
        if let current = self.ofPresence {
          hadOneofValue = true
          if case .typing(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.ofPresence = .typing(v)
        }
      }()
      case 9: try {
        var v: UserAudioRecording?
        var hadOneofValue = false
        if let current = self.ofPresence {
          hadOneofValue = true
          if case .audioRecording(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.ofPresence = .audioRecording(v)
        }
      }()
      case 10: try {
        var v: UserStatus?
        var hadOneofValue = false
        if let current = self.ofPresence {
          hadOneofValue = true
          if case .userStatus(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.ofPresence = .userStatus(v)
        }
      }()
      case 11: try {
        var v: MessagesDeleted?
        var hadOneofValue = false
        if let current = self.ofUpdate {
          hadOneofValue = true
          if case .messagesDeleted(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.ofUpdate = .messagesDeleted(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.state != 0 {
      try visitor.visitSingularUInt64Field(value: self.state, fieldNumber: 1)
    }
    switch self.ofUpdate {
    case .message?: try {
      guard case .message(let v)? = self.ofUpdate else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .contact?: try {
      guard case .contact(let v)? = self.ofUpdate else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .messagesDelivered?: try {
      guard case .messagesDelivered(let v)? = self.ofUpdate else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .messagesRead?: try {
      guard case .messagesRead(let v)? = self.ofUpdate else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    default: break
    }
    switch self.ofPresence {
    case .typing?: try {
      guard case .typing(let v)? = self.ofPresence else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .audioRecording?: try {
      guard case .audioRecording(let v)? = self.ofPresence else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .userStatus?: try {
      guard case .userStatus(let v)? = self.ofPresence else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case nil: break
    }
    try { if case .messagesDeleted(let v)? = self.ofUpdate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Update, rhs: Update) -> Bool {
    if lhs.state != rhs.state {return false}
    if lhs.ofUpdate != rhs.ofUpdate {return false}
    if lhs.ofPresence != rhs.ofPresence {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Updates: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Updates"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "last_state"),
    2: .same(proto: "count"),
    4: .same(proto: "updates"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.lastState) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.count) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.updates) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.lastState != 0 {
      try visitor.visitSingularUInt64Field(value: self.lastState, fieldNumber: 1)
    }
    if self.count != 0 {
      try visitor.visitSingularInt64Field(value: self.count, fieldNumber: 2)
    }
    if !self.updates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.updates, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Updates, rhs: Updates) -> Bool {
    if lhs.lastState != rhs.lastState {return false}
    if lhs.count != rhs.count {return false}
    if lhs.updates != rhs.updates {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
